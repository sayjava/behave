{
    "swagger": "2.0",
    "info": {
      "title": "Orders V3",
      "version": "",
      "description": "Surfaces endpoints related to payment processing. The `/orders/{id}/transactions` endpoint returns transaction details for the specified order. To programmatically create, update, and delete orders themselves, see [Orders\nv2](https://developer.bigcommerce.com/api-reference/store-management/orders). To process payments, see [Payment\nProcessing](https://developer.bigcommerce.com/api-reference/payments/payments-process-payments).\n\n- [Authentication](#authentication)\n- [Available Endpoints](#available-endpoints)\n- [Order Transactions](#order-transactions)\n- [Order refunds](#order-refunds)\n- [Resources](#resources)\n\n## Authentication\n\nAuthenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.\n\n```http\nGET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}}\nContent-Type: application/json\nX-Auth-Token: {{ACCESS_TOKEN}}\n```\n\n### OAuth Scopes\n\n| UI Name| Permission |Parameter|\n|----------------------------------------------|------------|----------|\n| Order Transactions|modify|`store_v2_transactions`|\n| Order Transactions|read-only  |`store_v2_transactions_read_only`|\n| Orders| modify|`store_v2_orders`|\n| Orders| read-only|`store_v2_orders_read_only`|\n\n## Order Transactions\nThe `/orders/{id}/transactions` endpoint returns details about the payment instruments used to pay for an order. Depending on the payment method used, different details will be available. Not all credit card payment gateways return full card or fraud details. Transactions endpoints are primarily used to get detailed gateway response information for credit card transactions; however they will also return any available information about digital wallet and offline payments.\n\n**Note**: transactions are not created for the following payment methods:\n* Test Payment Gateway\n* PayPal Express\n* Amazon Pay\n\n## Order Refunds\nThe Order API refund endpoints allow developers to process refunds against orders with settled payments. Refund endpoints are useful when building order management or payment integrations. They make embedding refund functionality directly into the application possible without requiring merchants to return to their BigCommerce Control Panel.\n\n## Resources\n* [Orders\nOverview](https://developer.bigcommerce.com/api-docs/orders/orders-overview)\n* [Orders\nV2](https://developer.bigcommerce.com/api-reference/store-management/orders)",
      "termsOfService": "",
      "license": {
        "name": ""
      }
    },
    "host": "api.bigcommerce.com",
    "basePath": "/stores/{$$.env.store_hash}/v3",
    "tags": [
      {
        "name": "Metafields"
      },
      {
        "name": "Order Refunds"
      },
      {
        "name": "Transactions"
      }
    ],
    "schemes": [
      "https"
    ],
    "produces": [
      "application/json"
    ],
    "consumes": [
      "application/json"
    ],
    "paths": {
      "/orders/{order_id}/transactions": {
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "The ID of the `Order` to which the transactions belong.\n",
            "required": true,
            "type": "integer"
          }
        ],
        "get": {
          "tags": [
            "Transactions"
          ],
          "description": "Returns an **order's** transactions. \n\n**Usage Notes**\n* Depending on the payment method, different information will be available (not all payment gateways return full card or fraud detail).\n* Transactions are not created for the following payment methods:\n\t* Test Payment Gateway\n\t* PayPal Express\n\t* Amazon Pay",
          "operationId": "getTransactions",
          "responses": {
            "200": {
              "description": "Response payload for the BigCommerce Order Transactions API.",
              "examples": {
                "application/json": {
                  "data": [
                    {
                      "id": 85926313,
                      "order_id": "121",
                      "event": "purchase",
                      "method": "nonce",
                      "amount": 1,
                      "currency": "USD",
                      "gateway": "squarev2",
                      "gateway_transaction_id": "pN5Kd7R9ilEI2ygBawCy7tMF|qwnAFAxRZ7tYRtIpZULg1yMF",
                      "status": "ok",
                      "test": false,
                      "fraud_review": false,
                      "reference_transaction_id": {},
                      "date_created": "2018-05-08T15:06:12+00:00",
                      "avs_result": {
                        "code": "",
                        "message": "",
                        "street_match": "",
                        "postal_match": ""
                      },
                      "cvv_result": {
                        "code": "",
                        "message": ""
                      },
                      "credit_card": {},
                      "gift_certificate": {},
                      "store_credit": {},
                      "offline": {},
                      "custom": {},
                      "payment_instrument_token": {},
                      "payment_method_id": "squarev2.card"
                    }
                  ],
                  "meta": {
                    "pagination": {
                      "total": 1,
                      "count": 1,
                      "per_page": 50,
                      "current_page": 1,
                      "total_pages": 1,
                      "links": {
                        "current": "?page=1&limit=50"
                      }
                    }
                  }
                }
              },
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "description": "A BigCommerce Transaction object describes a single transaction.",
                      "allOf": [
                        {
                          "title": "Transaction Base",
                          "properties": {
                            "event": {
                              "type": "string",
                              "description": "Store event that created the transaction.\n",
                              "enum": [
                                "purchase",
                                "authorization",
                                "capture",
                                "refund",
                                "void",
                                "pending",
                                "settled"
                              ]
                            },
                            "method": {
                              "type": "string",
                              "description": "The payment method: `credit_card` - a credit-card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site; `offline` - payment method that takes place offline.\n",
                              "enum": [
                                "credit_card",
                                "electronic_wallet",
                                "gift_certificate",
                                "store_credit",
                                "apple_pay_card",
                                "apple_pay_token",
                                "token",
                                "custom",
                                "offsite",
                                "offline",
                                "nonce"
                              ]
                            },
                            "amount": {
                              "type": "number",
                              "format": "float",
                              "description": "Amount of money in the transaction.\n"
                            },
                            "currency": {
                              "type": "string",
                              "format": "ISO-4217",
                              "description": "Currency used for the transaction.\n"
                            },
                            "gateway": {
                              "type": "string",
                              "description": "The payment gateway, where applicable.\n",
                              "enum": [
                                "2checkout",
                                "adyen",
                                "amazon",
                                "authorizenet",
                                "bankdeposit",
                                "braintree",
                                "cheque",
                                "cod",
                                "custom",
                                "firstdatagge4",
                                "giftcertificate",
                                "hps",
                                "instore",
                                "klarna",
                                "migs",
                                "moneyorder",
                                "nmi",
                                "paypalexpress",
                                "paypalpaymentsprous",
                                "paypalpaymentsprouk",
                                "plugnpay",
                                "qbmsv2",
                                "securenet",
                                "square",
                                "storecredit",
                                "stripe",
                                "testgateway",
                                "usaepay"
                              ]
                            },
                            "gateway_transaction_id": {
                              "description": "The transaction ID returned by the payment gateway for this transaction item.\n",
                              "type": "string"
                            },
                            "date_created": {
                              "description": "The datetime of the transaction.\n",
                              "type": "string",
                              "format": "date-time"
                            },
                            "test": {
                              "type": "boolean",
                              "description": "True if the transaction performed was a test, or if the gateway is in test mode.\n"
                            },
                            "status": {
                              "type": "string",
                              "description": "Status of the transaction.\n",
                              "enum": [
                                "ok",
                                "error"
                              ]
                            },
                            "fraud_review": {
                              "type": "boolean",
                              "description": "Result of gateway fraud review, if any. Default is `false`.\n"
                            },
                            "reference_transaction_id": {
                              "type": "integer",
                              "description": "Identifier for an existing transaction upon which this transaction acts.\n"
                            },
                            "offline": {
                              "type": "object",
                              "description": "Offline payment (e.g., check or purchase order).",
                              "title": "Offline",
                              "properties": {
                                "display_name": {
                                  "description": "Display name for the offline payment.\n",
                                  "type": "string"
                                }
                              }
                            },
                            "custom": {
                              "type": "object",
                              "description": "Custom payment from manual order.",
                              "title": "Custom",
                              "properties": {
                                "payment_method": {
                                  "description": "Text entered for the payment method in the control panel.\n",
                                  "type": "string"
                                }
                              }
                            },
                            "payment_method_id": {
                              "type": "string",
                              "description": "The payment method ID used for this transaction\n"
                            }
                          },
                          "required": [
                            "event",
                            "method",
                            "amount",
                            "currency",
                            "gateway"
                          ]
                        },
                        {
                          "properties": {
                            "id": {
                              "type": "integer",
                              "description": "Unique identifier for the transaction.\n"
                            },
                            "order_id": {
                              "type": "string",
                              "description": "Identifier for the BigCommerce Order with which this transaction is associated.\n"
                            },
                            "date_created": {
                              "description": "The datetime of the transaction.\n",
                              "type": "string",
                              "format": "date-time"
                            },
                            "payment_instrument_token": {
                              "type": "string",
                              "description": "This field contains internal BigPay token for stored card that is then mapped to the actual third-party token. We currently do not offer a way to get third party tokens.These tokens are read-only and do not return any information about the payment."
                            },
                            "avs_result": {
                              "description": "Address Verification Service (AVS) result from the payment gateway.",
                              "type": "object",
                              "title": "AVS Results",
                              "properties": {
                                "code": {
                                  "description": "AVS code.",
                                  "type": "string"
                                },
                                "message": {
                                  "description": "AVS message.",
                                  "type": "string"
                                },
                                "street_match": {
                                  "description": "AVS Code for street matching result.",
                                  "type": "string"
                                },
                                "postal_match": {
                                  "description": "AVS Code for postal matching result.",
                                  "type": "string"
                                }
                              }
                            },
                            "cvv_result": {
                              "description": "Card Verification Value result from the payment gateway.",
                              "type": "object",
                              "title": "CVV Result",
                              "properties": {
                                "code": {
                                  "description": "CVV code.",
                                  "type": "string"
                                },
                                "message": {
                                  "description": "CVV message.",
                                  "type": "string"
                                }
                              }
                            },
                            "credit_card": {
                              "type": "object",
                              "description": "A credit-card model.",
                              "title": "Credit Card",
                              "properties": {
                                "card_type": {
                                  "type": "string",
                                  "enum": [
                                    "alelo",
                                    "alia",
                                    "american_express",
                                    "cabal",
                                    "carnet",
                                    "dankort",
                                    "diners_club",
                                    "discover",
                                    "elo",
                                    "forbrugsforeningen",
                                    "jcb",
                                    "maestro",
                                    "master",
                                    "naranja",
                                    "sodexo",
                                    "unionpay",
                                    "visa",
                                    "vr"
                                  ],
                                  "description": "**Allowed values**: alelo, alia, american_express, cabal, carnet, dankort, diners_club, discover, elo, forbrugsforeningen, jcb, maestro, master, naranja, sodexo, unionpay, visa, vr"
                                },
                                "card_iin": {
                                  "description": "The IIN of a credit-card number.\n",
                                  "type": "string"
                                },
                                "card_last4": {
                                  "description": "The last 4 digits of a credit-card number.\n",
                                  "type": "string"
                                },
                                "card_expiry_month": {
                                  "description": "The expiry month of a credit-card.\n",
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 12
                                },
                                "card_expiry_year": {
                                  "description": "The expiry year of a credit-card.\n",
                                  "type": "integer"
                                }
                              }
                            },
                            "gift_certificate": {
                              "type": "object",
                              "description": "A gift-certificate model.",
                              "title": "Gift Certificate",
                              "properties": {
                                "code": {
                                  "description": "The gift-certificate code.\n",
                                  "type": "string",
                                  "example": "MB345"
                                },
                                "original_balance": {
                                  "description": "The balance on a gift certificate when it was purchased.\n",
                                  "type": "number",
                                  "format": "float",
                                  "example": 100
                                },
                                "starting_balance": {
                                  "description": "The balance on a gift certificate at the time of this purchase.\n",
                                  "type": "number",
                                  "format": "float",
                                  "example": 100
                                },
                                "remaining_balance": {
                                  "description": "The remaining balance on a gift certificate.\n",
                                  "type": "number",
                                  "format": "float",
                                  "example": 35.42
                                },
                                "status": {
                                  "description": "The status of a gift certificate: `active` - gift certificate is active; `pending` - gift certificate purchase is pending; `disabled` - gift certificate is disabled; `expired` - gift certificate is expired.\n",
                                  "type": "string",
                                  "enum": [
                                    "active",
                                    "pending",
                                    "disabled",
                                    "expired"
                                  ]
                                }
                              }
                            },
                            "store_credit": {
                              "type": "object",
                              "description": "A store credit model.\n",
                              "properties": {
                                "remaining_balance": {
                                  "description": "Remaining balance of shopper's store credit.\n",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      ],
                      "title": "Transaction",
                      "type": "object"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "title": "metaCollection_Full",
                    "properties": {
                      "pagination": {
                        "type": "object",
                        "title": "pagination_Full",
                        "properties": {
                          "total": {
                            "description": "Total number of items in the result set.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "count": {
                            "description": "Total number of items in the collection response.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "per_page": {
                            "description": "The amount of items returned in the collection per page, controlled by the limit parameter.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "current_page": {
                            "description": "The page you are currently on within the collection.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "total_pages": {
                            "description": "The total number of pages in the collection.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "links": {
                            "type": "object",
                            "properties": {
                              "previous": {
                                "type": "string",
                                "description": "Link to the previous page returned in the response.\n"
                              },
                              "current": {
                                "type": "string",
                                "description": "Link to the current page returned in the response.\n",
                                "example": "?page=1&limit=50"
                              },
                              "next": {
                                "type": "string",
                                "description": "Link to the next page returned in the response.\n"
                              }
                            },
                            "title": "links_Full"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "204": {
              "description": "No content found to fulfill request.\n",
              "schema": {
                "description": "No-content response for the BigCommerce API.",
                "type": "object",
                "properties": {
                  "status": {
                    "description": "204 HTTP status code.\n",
                    "type": "integer"
                  },
                  "title": {
                    "description": "The error title describing the situation.",
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "instance": {
                    "type": "string"
                  }
                },
                "title": "No Content"
              }
            },
            "404": {
              "description": "The resource was not found.\n",
              "schema": {
                "description": "Error payload for the BigCommerce API.",
                "type": "object",
                "properties": {
                  "status": {
                    "description": "404 HTTP status code.\n",
                    "type": "integer"
                  },
                  "title": {
                    "description": "The error title describing the particular error.",
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "instance": {
                    "type": "string"
                  }
                },
                "title": "Not Found"
              }
            }
          },
          "summary": "Get Transactions",
          "parameters": [
            {
              "name": "order_id",
              "in": "path",
              "description": "The ID of the `Order` to which the transactions belong.\n",
              "required": true,
              "type": "integer"
            },
            {
              "in": "header",
              "type": "string",
              "name": "Accept",
              "default": "application/json"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "type": "string",
              "default": "application/json"
            }
          ]
        }
      },
      "/orders/payment_actions/refunds": {},
      "/orders/{order_id}/payment_actions/refund_quotes": {
        "post": {
          "summary": "Create a Refund Quote",
          "description": "Calculate the tax amount, total refund amount and get availble payment options for an order refund by providing items and costs or quantities to refund.",
          "operationId": "postrefundquote",
          "parameters": [
            {
              "name": "order_id",
              "in": "path",
              "description": "Order id",
              "required": true,
              "type": "integer"
            },
            {
              "name": "body",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "title": "RefundQuote_Post",
                "description": "Request body for refund quotes.",
                "properties": {
                  "order_id": {
                    "type": "integer",
                    "description": "Order ID against which this refund will be created. This is optional for creating a single refund request. The order ID is included in the request path.",
                    "example": 1
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "type": "object",
                          "title": "Amount Bound Item",
                          "description": "Amount Bound Item\n\nType of refund item that capture refunding of items in the order that are of type amount.\n* `SHIPPING`\n* `HANDLING`\n",
                          "properties": {
                            "item_type": {
                              "type": "string",
                              "enum": [
                                "SHIPPING",
                                "HANDLING"
                              ],
                              "example": "SHIPPING",
                              "description": "Type of refund."
                            },
                            "item_id": {
                              "type": "integer",
                              "example": 1,
                              "description": "Order address ID."
                            },
                            "amount": {
                              "type": "number",
                              "format": "float",
                              "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                              "example": 1.99,
                              "title": "Amount"
                            },
                            "reason": {
                              "type": "string",
                              "minLength": 0,
                              "maxLength": 1000
                            }
                          }
                        },
                        {
                          "type": "object",
                          "title": "Quantity Bound Item",
                          "description": "Quantity Bound Item\n\nType of refund item that capture refunding of items in the order that are of type quantity.\n* `PRODUCT`\n* `GIFT_WRAPPING`\n",
                          "properties": {
                            "item_type": {
                              "type": "string",
                              "enum": [
                                "PRODUCT",
                                "GIFT_WRAPPING"
                              ],
                              "description": "Type of refund."
                            },
                            "item_id": {
                              "type": "integer",
                              "example": 1,
                              "description": "Order Product ID. "
                            },
                            "quantity": {
                              "type": "integer",
                              "example": 3
                            },
                            "reason": {
                              "type": "string",
                              "description": "Reason for refund",
                              "minLength": 0,
                              "maxLength": 1000
                            }
                          }
                        },
                        {
                          "type": "object",
                          "title": "Tax Exempt Item",
                          "description": "Tax Exempt Item",
                          "properties": {
                            "item_type": {
                              "type": "string",
                              "description": "Type of refund.",
                              "example": "ORDER",
                              "enum": [
                                "ORDER"
                              ]
                            },
                            "amount": {
                              "type": "number",
                              "format": "float",
                              "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                              "example": 1.99,
                              "title": "Amount"
                            },
                            "reason": {
                              "type": "string",
                              "description": "Reason for the refund.",
                              "minLength": 0,
                              "maxLength": 1000
                            },
                            "item_id": {
                              "type": "integer",
                              "description": "Order Product ID."
                            }
                          }
                        }
                      ]
                    },
                    "title": "ItemsRefund"
                  }
                },
                "required": [
                  "order_id",
                  "items"
                ]
              },
              "x-examples": {
                "application/json": {
                  "items": [
                    {
                      "item_id": 75,
                      "item_type": "PRODUCT",
                      "quantity": 1
                    },
                    {
                      "item_id": 79,
                      "item_type": "SHIPPING",
                      "amount": 10
                    }
                  ],
                  "tax_adjustment_amount": 0
                }
              }
            },
            {
              "in": "header",
              "type": "string",
              "name": "Accept",
              "default": "application/json"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "type": "string",
              "default": "application/json"
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "title": "RefundQuote_Full",
                    "properties": {
                      "order_id": {
                        "type": "integer",
                        "description": "ID of the order to be refunded"
                      },
                      "total_refund_amount": {
                        "type": "number",
                        "format": "float",
                        "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                        "example": 1.99,
                        "title": "Amount"
                      },
                      "total_refund_tax_amount": {
                        "type": "number",
                        "example": 1.95
                      },
                      "rounding": {
                        "type": "number",
                        "description": "Indicates rounding value to bring refund_total to an amount refundable via payment providers (in this case to 2 decimal places)"
                      },
                      "adjustment": {
                        "type": "number",
                        "format": "float",
                        "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                        "example": 1.99,
                        "title": "Amount"
                      },
                      "tax_inclusive": {
                        "type": "boolean",
                        "description": "Indicate if total_refund_amount includes tax amount"
                      },
                      "refund_methods": {
                        "type": "array",
                        "description": "An array of available refund methods.\n\nNote that `refund_methods` is an array of refund methods, with each refund method being an array of payment options.\n\nFor example, if the order was placed by a combination of store credit and bank deposit the  refund methods would be:\n```json\n{\n  \"refund_methods\": [\n    [\n      {\n        \"provider_id\": \"storecredit\",\n        \"provider_description\": \"Store Credit\",\n        \"amount\": 119.35,\n        \"offline\": false,\n        \"offline_provider\": false,\n        \"offline_reason\": \"\"\n      }\n    ],\n    [\n      {\n        \"provider_id\": \"custom\",\n        \"provider_description\": \"Custom\",\n        \"amount\": 119.35,\n        \"offline\": true,\n        \"offline_provider\": true,\n        \"offline_reason\": \"This is an offline payment provider.\"\n      }\n    ],\n    [\n      {\n        \"provider_id\": \"bankdeposit\",\n        \"provider_description\": \"Bank Deposit\",\n        \"amount\": 80.35,\n        \"offline\": true,\n        \"offline_provider\": true,\n        \"offline_reason\": \"This is an offline payment provider.\"\n      },\n      {\n        \"provider_id\": \"storecredit\",\n        \"provider_description\": \"Store Credit\",\n        \"amount\": 39,\n        \"offline\": false,\n        \"offline_provider\": false,\n        \"offline_reason\": \"\"\n      }\n    ]\n  ]\n}\n```\n\nIn this case there are three refund methods available to the merchant:\n1. Refund up to the entire order amount to store credit.\n2. Mark an amount up to the full order amount as refunded externally, through a provider or means not represented directly in BC (\"custom\").\n3. Refund the amount paid by store credit to store credit, and the amount paid by bank deposit via a manual refund, which will be recorded as being refunded against the bank deposit.\n\n>\n\n\n",
                        "items": {
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "example": {
                              "provider_id": "checkout_paypalexpress",
                              "provider_description": "Paypal Express",
                              "amount": 9.99,
                              "offline": true,
                              "offline_provider": true,
                              "offline_reason": "Multiple online refunds are not available"
                            },
                            "title": "Payment Option",
                            "properties": {
                              "provider_id": {
                                "type": "string",
                                "description": "Name of the payment method",
                                "example": "checkout_paypalexpress"
                              },
                              "provider_description": {
                                "type": "string",
                                "description": "Description for payment provider",
                                "example": "Paypal Express"
                              },
                              "amount": {
                                "type": "number",
                                "description": "amount to be refunded via this payment provider",
                                "example": 9.99
                              },
                              "offline": {
                                "type": "boolean",
                                "description": "Indicates the payment must be done offline due to constraints of the payment provider, such as partial refunds not being supported, or it being offline only such as cash on delivery of bank deposit.",
                                "example": true
                              },
                              "offline_provider": {
                                "type": "boolean",
                                "description": "Indicates if the payment provider is a strictly offline provider, such as cash on delivery or bank deposit.",
                                "example": true
                              },
                              "offline_reason": {
                                "type": "string",
                                "description": "Reason the payment option is offline only, if applicable.",
                                "example": "Multiple online refunds are not available"
                              }
                            }
                          },
                          "title": "Refund Method"
                        }
                      }
                    }
                  },
                  "meta": {
                    "type": "object"
                  }
                }
              },
              "examples": {
                "application/json": {
                  "data": {
                    "order_id": 1,
                    "total_refund_amount": 1.99,
                    "total_refund_tax_amount": 1.95,
                    "rounding": 1,
                    "adjustment": 1.99,
                    "tax_inclusive": true,
                    "refund_methods": [
                      ""
                    ]
                  },
                  "meta": {}
                }
              }
            },
            "422": {
              "description": "This occurs when missing or unacceptable data is passed for one or more fields. Please correct the values for the fields listed in the errors object.",
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "title": "error_Base",
                    "properties": {
                      "status": {
                        "description": "The HTTP status code.\n",
                        "type": "integer"
                      },
                      "title": {
                        "description": "The error title describing the particular error.\n",
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "description": "Error payload for the BigCommerce API."
                  },
                  {
                    "type": "object",
                    "properties": {
                      "errors": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "title": "DetailedErrors"
                      }
                    }
                  }
                ],
                "title": "ErrorResponse"
              },
              "examples": {
                "application/json": {
                  "status": 422,
                  "title": "JSON data is missing or invalid",
                  "type": "https://developer.bigcommerce.com/api#api-status-codes",
                  "errors": {
                    "name": "error.expected.jsstring",
                    "primary_contact.district": "error.expected.jsstring."
                  }
                }
              }
            }
          },
          "tags": [
            "Order Refunds"
          ]
        },
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "/orders/{order_id}/payment_actions/refunds": {
        "post": {
          "summary": "Create a Refund",
          "description": "Creates a refund.",
          "operationId": "postrefund",
          "parameters": [
            {
              "name": "order_id",
              "in": "path",
              "description": "order id",
              "required": true,
              "type": "integer"
            },
            {
              "name": "body",
              "in": "body",
              "required": true,
              "schema": {
                "type": "object",
                "description": "Request body for refund requests.",
                "title": "RefundRequest_Post",
                "properties": {
                  "order_id": {
                    "type": "integer",
                    "description": "Order id against which this refund will be created",
                    "example": 1
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "type": "object",
                          "title": "Amount Bound Item",
                          "description": "Amount Bound Item\n\nType of refund item that capture refunding of items in the order that are of type amount.\n* `SHIPPING`\n* `HANDLING`\n",
                          "properties": {
                            "item_type": {
                              "type": "string",
                              "enum": [
                                "SHIPPING",
                                "HANDLING"
                              ],
                              "example": "SHIPPING",
                              "description": "Type of refund."
                            },
                            "item_id": {
                              "type": "integer",
                              "example": 1,
                              "description": "Order address ID."
                            },
                            "amount": {
                              "type": "number",
                              "format": "float",
                              "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                              "example": 1.99,
                              "title": "Amount"
                            },
                            "reason": {
                              "type": "string",
                              "minLength": 0,
                              "maxLength": 1000
                            }
                          }
                        },
                        {
                          "type": "object",
                          "title": "Quantity Bound Item",
                          "description": "Quantity Bound Item\n\nType of refund item that capture refunding of items in the order that are of type quantity.\n* `PRODUCT`\n* `GIFT_WRAPPING`\n",
                          "properties": {
                            "item_type": {
                              "type": "string",
                              "enum": [
                                "PRODUCT",
                                "GIFT_WRAPPING"
                              ],
                              "description": "Type of refund."
                            },
                            "item_id": {
                              "type": "integer",
                              "example": 1,
                              "description": "Order Product ID. "
                            },
                            "quantity": {
                              "type": "integer",
                              "example": 3
                            },
                            "reason": {
                              "type": "string",
                              "description": "Reason for refund",
                              "minLength": 0,
                              "maxLength": 1000
                            }
                          }
                        },
                        {
                          "type": "object",
                          "title": "Tax Exempt Item",
                          "description": "Tax Exempt Item",
                          "properties": {
                            "item_type": {
                              "type": "string",
                              "description": "Type of refund.",
                              "example": "ORDER",
                              "enum": [
                                "ORDER"
                              ]
                            },
                            "amount": {
                              "type": "number",
                              "format": "float",
                              "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                              "example": 1.99,
                              "title": "Amount"
                            },
                            "reason": {
                              "type": "string",
                              "description": "Reason for the refund.",
                              "minLength": 0,
                              "maxLength": 1000
                            },
                            "item_id": {
                              "type": "integer",
                              "description": "Order Product ID."
                            }
                          }
                        }
                      ]
                    },
                    "title": "ItemsRefund"
                  },
                  "reason": {
                    "type": "string",
                    "description": "Reason for refund",
                    "example": "Wrong t-shirt size"
                  },
                  "payments": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "provider_id": {
                          "type": "string",
                          "description": "Reference to payment provider",
                          "example": "checkout_paypalexpress"
                        },
                        "amount": {
                          "type": "number",
                          "description": "Amount refunded via this provider",
                          "example": 9.99
                        },
                        "offline": {
                          "type": "boolean",
                          "description": "Whether the payment was marked as offline or performed through an online payment service.",
                          "example": true
                        }
                      },
                      "example": "{\n    \"provider_id\": \"checkout_paypalexpress\",\n    \"amount\": 9.99,\n    \"offline\": true\n}",
                      "title": "Payment Request"
                    }
                  }
                },
                "required": [
                  "order_id",
                  "items",
                  "payments"
                ]
              },
              "x-examples": {
                "application/json": {
                  "items": [
                    {
                      "item_id": 75,
                      "item_type": "PRODUCT",
                      "quantity": 1
                    },
                    {
                      "item_id": 79,
                      "item_type": "SHIPPING",
                      "amount": 10
                    }
                  ],
                  "tax_adjustment_amount": 0,
                  "payments": [
                    {
                      "provider_id": "storecredit",
                      "amount": 232.75,
                      "offline": false
                    }
                  ]
                }
              }
            },
            {
              "in": "header",
              "type": "string",
              "name": "Accept",
              "default": "application/json"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "type": "string",
              "default": "application/json"
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "title": "Refund",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "Refund resource ID",
                        "readOnly": true
                      },
                      "order_id": {
                        "type": "integer",
                        "description": "Reference to order id"
                      },
                      "user_id": {
                        "type": "integer",
                        "description": "Reference to the user's id who create this refund. This is automatically populated by BigCommerce.",
                        "readOnly": true
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp of when this refund was created",
                        "readOnly": true
                      },
                      "reason": {
                        "type": "string",
                        "description": "Reason for refund"
                      },
                      "total_amount": {
                        "type": "number",
                        "format": "float",
                        "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                        "example": 1.99,
                        "title": "Amount"
                      },
                      "total_tax": {
                        "type": "number",
                        "description": "Total tax amount refunded back to shopper. Note: order_level_amount does not affect tax liability. This can be negative amount indicating we have collected tax by virtue of refunding less to the customer"
                      },
                      "items": {
                        "type": "array",
                        "description": "Array of items refunded",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "properties": {
                            "item_type": {
                              "type": "string",
                              "description": "Type of item that was refunded",
                              "enum": [
                                "PRODUCT",
                                "GIFT_WRAPPING",
                                "SHIPPING",
                                "HANDLING",
                                "ORDER"
                              ]
                            },
                            "item_id": {
                              "type": "integer",
                              "description": "Reference to the item"
                            },
                            "reason": {
                              "type": "string",
                              "description": "Reason for refunding an item"
                            },
                            "quantity": {
                              "type": "integer",
                              "description": "Quantity of item refunded. Note: this will only be populated for item_type PRODUCT"
                            },
                            "requested_amount": {
                              "type": "number",
                              "format": "float",
                              "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                              "example": 1.99,
                              "title": "Amount"
                            }
                          },
                          "title": "Refund Item"
                        }
                      },
                      "payments": {
                        "type": "array",
                        "description": "An array of refund payments made to payment providers",
                        "minItems": 1,
                        "items": {
                          "type": "object",
                          "title": "Refund Payment",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "description": "Reference to refund payment id",
                              "readOnly": true
                            },
                            "provider_id": {
                              "type": "string",
                              "description": "Reference to payment provider",
                              "example": "storecredit"
                            },
                            "amount": {
                              "type": "number",
                              "format": "float",
                              "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                              "example": 1.99,
                              "title": "Amount"
                            },
                            "offline": {
                              "type": "boolean",
                              "description": "Indicate whether payment was offline"
                            },
                            "is_declined": {
                              "type": "boolean",
                              "description": "Indicate if this payment has been declined by payment provider"
                            },
                            "declined_message": {
                              "type": "string",
                              "description": "Message indicate why payment was declined"
                            }
                          }
                        }
                      }
                    }
                  },
                  "meta": {
                    "type": "object"
                  }
                }
              },
              "examples": {
                "application/json": {
                  "data": {
                    "id": 1,
                    "order_id": 1,
                    "user_id": 1,
                    "created": "",
                    "reason": "",
                    "total_amount": 1.99,
                    "total_tax": 1,
                    "items": [
                      {
                        "item_type": "HANDLING",
                        "item_id": 1,
                        "reason": "",
                        "quantity": 1,
                        "requested_amount": 0.05
                      }
                    ],
                    "payments": [
                      {
                        "id": 1,
                        "provider_id": "checkout_paypalexpress",
                        "amount": 1.99,
                        "offline": true,
                        "is_declined": true,
                        "declined_message": ""
                      }
                    ]
                  },
                  "meta": {}
                }
              }
            },
            "503": {
              "description": "Service Unavailable",
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "Failed quote response.",
                      "properties": {
                        "order_id": {
                          "type": "integer"
                        },
                        "status": {
                          "type": "integer",
                          "description": "HTTP status code",
                          "example": 422
                        },
                        "error": {
                          "type": "string",
                          "description": "details why the request failed"
                        }
                      },
                      "title": "FailedQuoteError"
                    }
                  },
                  "meta": {
                    "type": "object",
                    "title": "Meta",
                    "properties": {
                      "meta": {
                        "type": "object",
                        "description": "Data about the response, including pagination and collection totals.",
                        "title": "Pagination",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "description": "Total number of items in the result set.\n",
                            "example": 36
                          },
                          "count": {
                            "type": "integer",
                            "description": "Total number of items in the collection response.\n",
                            "example": 36
                          },
                          "per_page": {
                            "type": "integer",
                            "description": "The amount of items returned in the collection per page, controlled by the limit parameter.\n",
                            "example": 50
                          },
                          "current_page": {
                            "type": "integer",
                            "description": "The page you are currently on within the collection.\n",
                            "example": 1
                          },
                          "total_pages": {
                            "type": "integer",
                            "description": "The total number of pages in the collection.\n",
                            "example": 1
                          },
                          "links": {
                            "type": "object",
                            "description": "Pagination links for the previous and next parts of the whole collection.\n",
                            "properties": {
                              "previous": {
                                "type": "string",
                                "description": "Link to the previous page returned in the response.\n"
                              },
                              "current": {
                                "type": "string",
                                "description": "Link to the current page returned in the response.\n",
                                "example": "?page=1&limit=50"
                              },
                              "next": {
                                "type": "string",
                                "description": "Link to the next page returned in the response.\n"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "examples": {
                "application/json": {
                  "data": [
                    {
                      "order_id": 1,
                      "status": 503,
                      "error": "Tax service gone away"
                    }
                  ],
                  "meta": {}
                }
              }
            }
          },
          "tags": [
            "Order Refunds"
          ]
        },
        "get": {
          "summary": "Get Refunds for Order",
          "description": "Returns a list of refunds ordered by refund ID in ascending order for the given order.",
          "operationId": "getorderrefunds",
          "parameters": [
            {
              "in": "header",
              "type": "string",
              "name": "Accept",
              "default": "application/json"
            },
            {
              "name": "Content-Type",
              "in": "header",
              "type": "string",
              "default": "application/json"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object",
                "description": "Response payload for Refund resource",
                "properties": {
                  "data": {
                    "type": "array",
                    "description": "Collection of Refunds",
                    "items": {
                      "type": "object",
                      "title": "Refund",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Refund resource ID",
                          "readOnly": true
                        },
                        "order_id": {
                          "type": "integer",
                          "description": "Reference to order id"
                        },
                        "user_id": {
                          "type": "integer",
                          "description": "Reference to the user's id who create this refund. This is automatically populated by BigCommerce.",
                          "readOnly": true
                        },
                        "created": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp of when this refund was created",
                          "readOnly": true
                        },
                        "reason": {
                          "type": "string",
                          "description": "Reason for refund"
                        },
                        "total_amount": {
                          "type": "number",
                          "format": "float",
                          "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                          "example": 1.99,
                          "title": "Amount"
                        },
                        "total_tax": {
                          "type": "number",
                          "description": "Total tax amount refunded back to shopper. Note: order_level_amount does not affect tax liability. This can be negative amount indicating we have collected tax by virtue of refunding less to the customer"
                        },
                        "items": {
                          "type": "array",
                          "description": "Array of items refunded",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "properties": {
                              "item_type": {
                                "type": "string",
                                "description": "Type of item that was refunded",
                                "enum": [
                                  "PRODUCT",
                                  "GIFT_WRAPPING",
                                  "SHIPPING",
                                  "HANDLING",
                                  "ORDER"
                                ]
                              },
                              "item_id": {
                                "type": "integer",
                                "description": "Reference to the item"
                              },
                              "reason": {
                                "type": "string",
                                "description": "Reason for refunding an item"
                              },
                              "quantity": {
                                "type": "integer",
                                "description": "Quantity of item refunded. Note: this will only be populated for item_type PRODUCT"
                              },
                              "requested_amount": {
                                "type": "number",
                                "format": "float",
                                "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                                "example": 1.99,
                                "title": "Amount"
                              }
                            },
                            "title": "Refund Item"
                          }
                        },
                        "payments": {
                          "type": "array",
                          "description": "An array of refund payments made to payment providers",
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "title": "Refund Payment",
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "Reference to refund payment id",
                                "readOnly": true
                              },
                              "provider_id": {
                                "type": "string",
                                "description": "Reference to payment provider",
                                "example": "storecredit"
                              },
                              "amount": {
                                "type": "number",
                                "format": "float",
                                "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                                "example": 1.99,
                                "title": "Amount"
                              },
                              "offline": {
                                "type": "boolean",
                                "description": "Indicate whether payment was offline"
                              },
                              "is_declined": {
                                "type": "boolean",
                                "description": "Indicate if this payment has been declined by payment provider"
                              },
                              "declined_message": {
                                "type": "string",
                                "description": "Message indicate why payment was declined"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "meta": {
                    "type": "object",
                    "description": "Meta data collection"
                  }
                }
              }
            }
          },
          "tags": [
            "Order Refunds"
          ]
        },
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ]
      },
      "/orders/payment_actions/refund_quotes": {},
      "/orders/{order_id}/metafields": {
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "The ID of the `Order` to which the transactions belong.\n",
            "required": true,
            "type": "integer"
          }
        ],
        "get": {
          "summary": "Get Metafields",
          "tags": [
            "Metafields"
          ],
          "description": "Gets a `Metafield` object list, by `order_id`.\n",
          "operationId": "getOrderMetafieldsByOrderId",
          "parameters": [
            {
              "name": "page",
              "description": "Specifies the page number in a limited (paginated) list of products.\n",
              "required": false,
              "in": "query",
              "type": "integer"
            },
            {
              "name": "limit",
              "description": "Controls the number of items per page in a limited (paginated) list of products.\n",
              "required": false,
              "in": "query",
              "type": "integer"
            },
            {
              "name": "key",
              "in": "query",
              "description": "Filter based on a metafield's key.\n",
              "required": false,
              "type": "string"
            },
            {
              "name": "namespace",
              "in": "query",
              "description": "Filter based on a metafield's key.\n",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "An array of metafields and metadata.\n",
              "schema": {
                "type": "object",
                "description": "Response payload for the BigCommerce API.\n",
                "properties": {
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "Allows app partners to write custom data to various resources in the API.\n",
                      "allOf": [
                        {
                          "type": "object",
                          "description": "Common Metafield properties.\n",
                          "properties": {
                            "permission_set": {
                              "type": "string",
                              "description": "Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Can additionally grant storefront visibility to the field using (`read_and_sf_access`) or (`write_and_sf_access`).\n",
                              "enum": [
                                "app_only",
                                "read",
                                "write",
                                "read_and_sf_access",
                                "write_and_sf_access"
                              ],
                              "x-required": [
                                "post"
                              ]
                            },
                            "namespace": {
                              "type": "string",
                              "description": "Namespace for the metafield, for organizational purposes.\n",
                              "x-required": [
                                "post"
                              ],
                              "minLength": 1,
                              "maxLength": 64
                            },
                            "key": {
                              "type": "string",
                              "description": "The name of the field, for example: `location_id`, `color`.\n",
                              "x-required": [
                                "post"
                              ],
                              "minLength": 1,
                              "maxLength": 64
                            },
                            "value": {
                              "type": "string",
                              "description": "The value of the field, for example: `1`, `blue`.\n",
                              "x-required": [
                                "post"
                              ],
                              "minLength": 1,
                              "maxLength": 65535
                            },
                            "description": {
                              "type": "string",
                              "description": "Description for the metafields.\n",
                              "minLength": 0,
                              "maxLength": 255
                            },
                            "resource_type": {
                              "type": "string",
                              "description": "The type of resource with which the metafield is associated.\n",
                              "enum": [
                                "category",
                                "brand",
                                "product",
                                "variant"
                              ],
                              "x-required": [
                                "post"
                              ]
                            },
                            "resource_id": {
                              "type": "integer",
                              "description": "The unique identifier for the resource with which the metafield is associated.\n",
                              "x-required": [
                                "post"
                              ],
                              "minimum": 0,
                              "maximum": 10000000000
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "description": "The unique identifier for the metafields.\n"
                            },
                            "created_at": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Date and time of the metafield's creation.\n"
                            },
                            "updated_at": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Date and time when the metafield was last updated.\n"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "meta": {
                    "type": "object",
                    "description": "Data about the response, including pagination and collection totals.",
                    "properties": {
                      "pagination": {
                        "type": "object",
                        "description": "Data about the response, including pagination and collection totals.",
                        "title": "Pagination",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "description": "Total number of items in the result set.\n",
                            "example": 36
                          },
                          "count": {
                            "type": "integer",
                            "description": "Total number of items in the collection response.\n",
                            "example": 36
                          },
                          "per_page": {
                            "type": "integer",
                            "description": "The amount of items returned in the collection per page, controlled by the limit parameter.\n",
                            "example": 50
                          },
                          "current_page": {
                            "type": "integer",
                            "description": "The page you are currently on within the collection.\n",
                            "example": 1
                          },
                          "total_pages": {
                            "type": "integer",
                            "description": "The total number of pages in the collection.\n",
                            "example": 1
                          },
                          "links": {
                            "type": "object",
                            "description": "Pagination links for the previous and next parts of the whole collection.\n",
                            "properties": {
                              "previous": {
                                "type": "string",
                                "description": "Link to the previous page returned in the response.\n"
                              },
                              "current": {
                                "type": "string",
                                "description": "Link to the current page returned in the response.\n",
                                "example": "?page=1&limit=50"
                              },
                              "next": {
                                "type": "string",
                                "description": "Link to the next page returned in the response.\n"
                              }
                            }
                          }
                        }
                      }
                    },
                    "title": "Collection Meta"
                  }
                }
              }
            },
            "404": {
              "description": "The resource was not found.\n",
              "schema": {
                "description": "Error payload for the BigCommerce API.",
                "type": "object",
                "properties": {
                  "status": {
                    "description": "404 HTTP status code.\n",
                    "type": "integer"
                  },
                  "title": {
                    "description": "The error title describing the particular error.",
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "instance": {
                    "type": "string"
                  }
                },
                "title": "Not Found"
              }
            }
          }
        },
        "post": {
          "summary": "Create Metafields",
          "tags": [
            "Metafields"
          ],
          "description": "Creates an order `Metafield`.",
          "operationId": "createOrderMetafield",
          "parameters": [
            {
              "name": "Metafield",
              "in": "body",
              "required": true,
              "description": "A `Metafield` object.\n",
              "schema": {
                "type": "object",
                "description": "The model for a POST to create metafield.\n",
                "allOf": [
                  {
                    "type": "object",
                    "description": "Common Metafield properties.\n",
                    "properties": {
                      "permission_set": {
                        "type": "string",
                        "description": "Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Can additionally grant storefront visibility to the field using (`read_and_sf_access`) or (`write_and_sf_access`).\n",
                        "enum": [
                          "app_only",
                          "read",
                          "write",
                          "read_and_sf_access",
                          "write_and_sf_access"
                        ],
                        "x-required": [
                          "post"
                        ]
                      },
                      "namespace": {
                        "type": "string",
                        "description": "Namespace for the metafield, for organizational purposes.\n",
                        "x-required": [
                          "post"
                        ],
                        "minLength": 1,
                        "maxLength": 64
                      },
                      "key": {
                        "type": "string",
                        "description": "The name of the field, for example: `location_id`, `color`.\n",
                        "x-required": [
                          "post"
                        ],
                        "minLength": 1,
                        "maxLength": 64
                      },
                      "value": {
                        "type": "string",
                        "description": "The value of the field, for example: `1`, `blue`.\n",
                        "x-required": [
                          "post"
                        ],
                        "minLength": 1,
                        "maxLength": 65535
                      },
                      "description": {
                        "type": "string",
                        "description": "Description for the metafields.\n",
                        "minLength": 0,
                        "maxLength": 255
                      },
                      "resource_type": {
                        "type": "string",
                        "description": "The type of resource with which the metafield is associated.\n",
                        "enum": [
                          "category",
                          "brand",
                          "product",
                          "variant"
                        ],
                        "x-required": [
                          "post"
                        ]
                      },
                      "resource_id": {
                        "type": "integer",
                        "description": "The unique identifier for the resource with which the metafield is associated.\n",
                        "x-required": [
                          "post"
                        ],
                        "minimum": 0,
                        "maximum": 10000000000
                      }
                    }
                  }
                ]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "A `Metafield` object.\n",
              "schema": {
                "description": "Response payload for the BigCommerce API.\n",
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "description": "Allows app partners to write custom data to various resources in the API.\n",
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Common Metafield properties.\n",
                        "properties": {
                          "permission_set": {
                            "type": "string",
                            "description": "Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Can additionally grant storefront visibility to the field using (`read_and_sf_access`) or (`write_and_sf_access`).\n",
                            "enum": [
                              "app_only",
                              "read",
                              "write",
                              "read_and_sf_access",
                              "write_and_sf_access"
                            ],
                            "x-required": [
                              "post"
                            ]
                          },
                          "namespace": {
                            "type": "string",
                            "description": "Namespace for the metafield, for organizational purposes.\n",
                            "x-required": [
                              "post"
                            ],
                            "minLength": 1,
                            "maxLength": 64
                          },
                          "key": {
                            "type": "string",
                            "description": "The name of the field, for example: `location_id`, `color`.\n",
                            "x-required": [
                              "post"
                            ],
                            "minLength": 1,
                            "maxLength": 64
                          },
                          "value": {
                            "type": "string",
                            "description": "The value of the field, for example: `1`, `blue`.\n",
                            "x-required": [
                              "post"
                            ],
                            "minLength": 1,
                            "maxLength": 65535
                          },
                          "description": {
                            "type": "string",
                            "description": "Description for the metafields.\n",
                            "minLength": 0,
                            "maxLength": 255
                          },
                          "resource_type": {
                            "type": "string",
                            "description": "The type of resource with which the metafield is associated.\n",
                            "enum": [
                              "category",
                              "brand",
                              "product",
                              "variant"
                            ],
                            "x-required": [
                              "post"
                            ]
                          },
                          "resource_id": {
                            "type": "integer",
                            "description": "The unique identifier for the resource with which the metafield is associated.\n",
                            "x-required": [
                              "post"
                            ],
                            "minimum": 0,
                            "maximum": 10000000000
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "The unique identifier for the metafields.\n"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Date and time of the metafield's creation.\n"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Date and time when the metafield was last updated.\n"
                          }
                        }
                      }
                    ]
                  },
                  "meta": {
                    "type": "object",
                    "title": "Meta",
                    "properties": {
                      "meta": {
                        "type": "object",
                        "description": "Data about the response, including pagination and collection totals.",
                        "title": "Pagination",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "description": "Total number of items in the result set.\n",
                            "example": 36
                          },
                          "count": {
                            "type": "integer",
                            "description": "Total number of items in the collection response.\n",
                            "example": 36
                          },
                          "per_page": {
                            "type": "integer",
                            "description": "The amount of items returned in the collection per page, controlled by the limit parameter.\n",
                            "example": 50
                          },
                          "current_page": {
                            "type": "integer",
                            "description": "The page you are currently on within the collection.\n",
                            "example": 1
                          },
                          "total_pages": {
                            "type": "integer",
                            "description": "The total number of pages in the collection.\n",
                            "example": 1
                          },
                          "links": {
                            "type": "object",
                            "description": "Pagination links for the previous and next parts of the whole collection.\n",
                            "properties": {
                              "previous": {
                                "type": "string",
                                "description": "Link to the previous page returned in the response.\n"
                              },
                              "current": {
                                "type": "string",
                                "description": "Link to the current page returned in the response.\n",
                                "example": "?page=1&limit=50"
                              },
                              "next": {
                                "type": "string",
                                "description": "Link to the next page returned in the response.\n"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "409": {
              "description": "The `Metafield` was in conflict with another `Metafield`. This can be the result of duplicate unique key combinations of the app's client id, namespace, key, resource_type, and resource_id.\n",
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "title": "error_Base",
                    "properties": {
                      "status": {
                        "description": "The HTTP status code.\n",
                        "type": "integer"
                      },
                      "title": {
                        "description": "The error title describing the particular error.\n",
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "description": "Error payload for the BigCommerce API."
                  },
                  {
                    "type": "object",
                    "properties": {
                      "errors": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "title": "DetailedErrors"
                      }
                    }
                  }
                ],
                "title": "ErrorResponse"
              }
            },
            "422": {
              "description": "The `Metafield` was not valid. This is the result of missing required fields, or of invalid data. See the response for more details.\n",
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "title": "error_Base",
                    "properties": {
                      "status": {
                        "description": "The HTTP status code.\n",
                        "type": "integer"
                      },
                      "title": {
                        "description": "The error title describing the particular error.\n",
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "description": "Error payload for the BigCommerce API."
                  },
                  {
                    "type": "object",
                    "properties": {
                      "errors": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "title": "DetailedErrors"
                      }
                    }
                  }
                ],
                "title": "ErrorResponse"
              }
            }
          }
        }
      },
      "/orders/{order_id}/metafields/{metafield_id}": {
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "The ID of the `Order` to which the transactions belong.\n",
            "required": true,
            "type": "integer"
          },
          {
            "name": "metafield_id",
            "in": "path",
            "description": "The ID of the `Metafield`.\n",
            "required": true,
            "type": "integer"
          }
        ],
        "get": {
          "summary": "Get a Metafield",
          "tags": [
            "Metafields"
          ],
          "description": "Gets a `Metafield`, by `order_id`.\n",
          "operationId": "getOrderMetafieldByOrderIdAndMetafieldId",
          "responses": {
            "200": {
              "description": "A `Metafield` object.\n",
              "schema": {
                "description": "Response payload for the BigCommerce API.\n",
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "description": "Allows app partners to write custom data to various resources in the API.\n",
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Common Metafield properties.\n",
                        "properties": {
                          "permission_set": {
                            "type": "string",
                            "description": "Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Can additionally grant storefront visibility to the field using (`read_and_sf_access`) or (`write_and_sf_access`).\n",
                            "enum": [
                              "app_only",
                              "read",
                              "write",
                              "read_and_sf_access",
                              "write_and_sf_access"
                            ],
                            "x-required": [
                              "post"
                            ]
                          },
                          "namespace": {
                            "type": "string",
                            "description": "Namespace for the metafield, for organizational purposes.\n",
                            "x-required": [
                              "post"
                            ],
                            "minLength": 1,
                            "maxLength": 64
                          },
                          "key": {
                            "type": "string",
                            "description": "The name of the field, for example: `location_id`, `color`.\n",
                            "x-required": [
                              "post"
                            ],
                            "minLength": 1,
                            "maxLength": 64
                          },
                          "value": {
                            "type": "string",
                            "description": "The value of the field, for example: `1`, `blue`.\n",
                            "x-required": [
                              "post"
                            ],
                            "minLength": 1,
                            "maxLength": 65535
                          },
                          "description": {
                            "type": "string",
                            "description": "Description for the metafields.\n",
                            "minLength": 0,
                            "maxLength": 255
                          },
                          "resource_type": {
                            "type": "string",
                            "description": "The type of resource with which the metafield is associated.\n",
                            "enum": [
                              "category",
                              "brand",
                              "product",
                              "variant"
                            ],
                            "x-required": [
                              "post"
                            ]
                          },
                          "resource_id": {
                            "type": "integer",
                            "description": "The unique identifier for the resource with which the metafield is associated.\n",
                            "x-required": [
                              "post"
                            ],
                            "minimum": 0,
                            "maximum": 10000000000
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "The unique identifier for the metafields.\n"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Date and time of the metafield's creation.\n"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Date and time when the metafield was last updated.\n"
                          }
                        }
                      }
                    ]
                  },
                  "meta": {
                    "type": "object",
                    "title": "Meta",
                    "properties": {
                      "meta": {
                        "type": "object",
                        "description": "Data about the response, including pagination and collection totals.",
                        "title": "Pagination",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "description": "Total number of items in the result set.\n",
                            "example": 36
                          },
                          "count": {
                            "type": "integer",
                            "description": "Total number of items in the collection response.\n",
                            "example": 36
                          },
                          "per_page": {
                            "type": "integer",
                            "description": "The amount of items returned in the collection per page, controlled by the limit parameter.\n",
                            "example": 50
                          },
                          "current_page": {
                            "type": "integer",
                            "description": "The page you are currently on within the collection.\n",
                            "example": 1
                          },
                          "total_pages": {
                            "type": "integer",
                            "description": "The total number of pages in the collection.\n",
                            "example": 1
                          },
                          "links": {
                            "type": "object",
                            "description": "Pagination links for the previous and next parts of the whole collection.\n",
                            "properties": {
                              "previous": {
                                "type": "string",
                                "description": "Link to the previous page returned in the response.\n"
                              },
                              "current": {
                                "type": "string",
                                "description": "Link to the current page returned in the response.\n",
                                "example": "?page=1&limit=50"
                              },
                              "next": {
                                "type": "string",
                                "description": "Link to the next page returned in the response.\n"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "The resource was not found.\n",
              "schema": {
                "description": "Error payload for the BigCommerce API.",
                "type": "object",
                "properties": {
                  "status": {
                    "description": "404 HTTP status code.\n",
                    "type": "integer"
                  },
                  "title": {
                    "description": "The error title describing the particular error.",
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "instance": {
                    "type": "string"
                  }
                },
                "title": "Not Found"
              }
            }
          }
        },
        "put": {
          "summary": "Update a Metafield",
          "tags": [
            "Metafields"
          ],
          "description": "Updates a `Metafield` object.",
          "operationId": "updateOrderMetafield",
          "parameters": [
            {
              "name": "Metafield",
              "in": "body",
              "required": true,
              "description": "A `Metafield` object.\n",
              "schema": {
                "type": "object",
                "description": "The model for a PUT to update metafield.\n",
                "allOf": [
                  {
                    "type": "object",
                    "description": "Common Metafield properties.\n",
                    "properties": {
                      "permission_set": {
                        "type": "string",
                        "description": "Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Can additionally grant storefront visibility to the field using (`read_and_sf_access`) or (`write_and_sf_access`).\n",
                        "enum": [
                          "app_only",
                          "read",
                          "write",
                          "read_and_sf_access",
                          "write_and_sf_access"
                        ],
                        "x-required": [
                          "post"
                        ]
                      },
                      "namespace": {
                        "type": "string",
                        "description": "Namespace for the metafield, for organizational purposes.\n",
                        "x-required": [
                          "post"
                        ],
                        "minLength": 1,
                        "maxLength": 64
                      },
                      "key": {
                        "type": "string",
                        "description": "The name of the field, for example: `location_id`, `color`.\n",
                        "x-required": [
                          "post"
                        ],
                        "minLength": 1,
                        "maxLength": 64
                      },
                      "value": {
                        "type": "string",
                        "description": "The value of the field, for example: `1`, `blue`.\n",
                        "x-required": [
                          "post"
                        ],
                        "minLength": 1,
                        "maxLength": 65535
                      },
                      "description": {
                        "type": "string",
                        "description": "Description for the metafields.\n",
                        "minLength": 0,
                        "maxLength": 255
                      },
                      "resource_type": {
                        "type": "string",
                        "description": "The type of resource with which the metafield is associated.\n",
                        "enum": [
                          "category",
                          "brand",
                          "product",
                          "variant"
                        ],
                        "x-required": [
                          "post"
                        ]
                      },
                      "resource_id": {
                        "type": "integer",
                        "description": "The unique identifier for the resource with which the metafield is associated.\n",
                        "x-required": [
                          "post"
                        ],
                        "minimum": 0,
                        "maximum": 10000000000
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "The unique identifier for the metafields.\n",
                        "x-required": [
                          "put"
                        ],
                        "minimum": 0,
                        "maximum": 10000000000
                      }
                    }
                  }
                ]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "A metafield and metadata.\n",
              "schema": {
                "description": "Response payload for the BigCommerce API.\n",
                "type": "object",
                "properties": {
                  "data": {
                    "type": "object",
                    "description": "Allows app partners to write custom data to various resources in the API.\n",
                    "allOf": [
                      {
                        "type": "object",
                        "description": "Common Metafield properties.\n",
                        "properties": {
                          "permission_set": {
                            "type": "string",
                            "description": "Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Can additionally grant storefront visibility to the field using (`read_and_sf_access`) or (`write_and_sf_access`).\n",
                            "enum": [
                              "app_only",
                              "read",
                              "write",
                              "read_and_sf_access",
                              "write_and_sf_access"
                            ],
                            "x-required": [
                              "post"
                            ]
                          },
                          "namespace": {
                            "type": "string",
                            "description": "Namespace for the metafield, for organizational purposes.\n",
                            "x-required": [
                              "post"
                            ],
                            "minLength": 1,
                            "maxLength": 64
                          },
                          "key": {
                            "type": "string",
                            "description": "The name of the field, for example: `location_id`, `color`.\n",
                            "x-required": [
                              "post"
                            ],
                            "minLength": 1,
                            "maxLength": 64
                          },
                          "value": {
                            "type": "string",
                            "description": "The value of the field, for example: `1`, `blue`.\n",
                            "x-required": [
                              "post"
                            ],
                            "minLength": 1,
                            "maxLength": 65535
                          },
                          "description": {
                            "type": "string",
                            "description": "Description for the metafields.\n",
                            "minLength": 0,
                            "maxLength": 255
                          },
                          "resource_type": {
                            "type": "string",
                            "description": "The type of resource with which the metafield is associated.\n",
                            "enum": [
                              "category",
                              "brand",
                              "product",
                              "variant"
                            ],
                            "x-required": [
                              "post"
                            ]
                          },
                          "resource_id": {
                            "type": "integer",
                            "description": "The unique identifier for the resource with which the metafield is associated.\n",
                            "x-required": [
                              "post"
                            ],
                            "minimum": 0,
                            "maximum": 10000000000
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "The unique identifier for the metafields.\n"
                          },
                          "created_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Date and time of the metafield's creation.\n"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Date and time when the metafield was last updated.\n"
                          }
                        }
                      }
                    ]
                  },
                  "meta": {
                    "type": "object",
                    "title": "Meta",
                    "properties": {
                      "meta": {
                        "type": "object",
                        "description": "Data about the response, including pagination and collection totals.",
                        "title": "Pagination",
                        "properties": {
                          "total": {
                            "type": "integer",
                            "description": "Total number of items in the result set.\n",
                            "example": 36
                          },
                          "count": {
                            "type": "integer",
                            "description": "Total number of items in the collection response.\n",
                            "example": 36
                          },
                          "per_page": {
                            "type": "integer",
                            "description": "The amount of items returned in the collection per page, controlled by the limit parameter.\n",
                            "example": 50
                          },
                          "current_page": {
                            "type": "integer",
                            "description": "The page you are currently on within the collection.\n",
                            "example": 1
                          },
                          "total_pages": {
                            "type": "integer",
                            "description": "The total number of pages in the collection.\n",
                            "example": 1
                          },
                          "links": {
                            "type": "object",
                            "description": "Pagination links for the previous and next parts of the whole collection.\n",
                            "properties": {
                              "previous": {
                                "type": "string",
                                "description": "Link to the previous page returned in the response.\n"
                              },
                              "current": {
                                "type": "string",
                                "description": "Link to the current page returned in the response.\n",
                                "example": "?page=1&limit=50"
                              },
                              "next": {
                                "type": "string",
                                "description": "Link to the next page returned in the response.\n"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "The resource was not found.\n",
              "schema": {
                "description": "Error payload for the BigCommerce API.",
                "type": "object",
                "properties": {
                  "status": {
                    "description": "404 HTTP status code.\n",
                    "type": "integer"
                  },
                  "title": {
                    "description": "The error title describing the particular error.",
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "instance": {
                    "type": "string"
                  }
                },
                "title": "Not Found"
              }
            }
          }
        },
        "delete": {
          "summary": "Delete a Metafield",
          "tags": [
            "Metafields"
          ],
          "description": "Deletes a `Metafield`.\n",
          "operationId": "deleteOrderMetafieldById",
          "responses": {
            "204": {
              "description": "An empty response.\n"
            }
          }
        }
      }
    },
    "parameters": {
      "OrderIdParam": {
        "name": "order_id",
        "in": "path",
        "description": "The ID of the `Order` to which the transactions belong.\n",
        "required": true,
        "type": "integer"
      },
      "Accept": {
        "in": "header",
        "type": "string",
        "name": "Accept",
        "default": "application/json"
      },
      "Content-Type": {
        "name": "Content-Type",
        "in": "header",
        "type": "string",
        "default": "application/json"
      },
      "PageParam": {
        "name": "page",
        "description": "Specifies the page number in a limited (paginated) list of products.\n",
        "required": false,
        "in": "query",
        "type": "integer"
      },
      "MetafieldIdParam": {
        "name": "metafield_id",
        "in": "path",
        "description": "The ID of the `Metafield`.\n",
        "required": true,
        "type": "integer"
      },
      "MetafieldKeyParam": {
        "name": "key",
        "in": "query",
        "description": "Filter based on a metafield's key.\n",
        "required": false,
        "type": "string"
      },
      "MetafieldNamespaceParam": {
        "name": "namespace",
        "in": "query",
        "description": "Filter based on a metafield's key.\n",
        "required": false,
        "type": "string"
      },
      "LimitParam": {
        "name": "limit",
        "description": "Controls the number of items per page in a limited (paginated) list of products.\n",
        "required": false,
        "in": "query",
        "type": "integer"
      }
    },
    "securityDefinitions": {
      "X-Auth-Token": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Auth-Token",
        "description": "### OAuth Scopes\n|  **UI Name** | **Permission** | **Parameter** |\n| --- | --- | --- |\n|  Order Transactions | modify | `store_v2_transactions` |\n|  Order Transactions | read-only | `store_v2_transactions_read_only` |\n\n### Headers\n\n|Header|Parameter|Description|\n|-|-|-|\n|`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|\n\n### Example\n\n```http\nGET /stores/{$$.env.store_hash}/v3/catalog/summary\nhost: api.bigcommerce.com\nContent-Type: application/json\nX-Auth-Token: {access_token}\n```\n\n* For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication)."
      }
    },
    "security": [
      {
        "X-Auth-Client": []
      },
      {
        "X-Auth-Token": []
      }
    ],
    "definitions": {
      "GetReturnsSettings": {
        "type": "object",
        "properties": {
          "reasons": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "label": {
                  "type": "string",
                  "description": "A description of the reason"
                },
                "is_archived": {
                  "type": "boolean",
                  "description": "Indicates whether or not the reason has been archived"
                }
              }
            }
          },
          "preferred_outcomes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "label": {
                  "type": "string",
                  "description": "A description of the outcome"
                },
                "is_archived": {
                  "type": "boolean",
                  "description": "Indicates whether or not the outcome has been archived"
                }
              }
            }
          }
        }
      },
      "Reason": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "label": {
            "type": "string",
            "description": "A description of the reason"
          },
          "is_archived": {
            "type": "boolean",
            "description": "Indicates whether or not the reason has been archived"
          }
        }
      },
      "PreferredOutcome": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "label": {
            "type": "string",
            "description": "A description of the outcome"
          },
          "is_archived": {
            "type": "boolean",
            "description": "Indicates whether or not the outcome has been archived"
          }
        }
      },
      "CreateReturnRequest": {
        "type": "object",
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "description": "A collection of items to be returned",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "reference_id",
                "quantity",
                "preferred_outcome_id",
                "reason_id"
              ],
              "properties": {
                "reference_id": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The reference type",
                      "enum": [
                        "ORDER_PRODUCT"
                      ]
                    },
                    "value": {
                      "type": "string",
                      "description": "The value identifying the returned item"
                    }
                  },
                  "required": [
                    "type",
                    "value"
                  ]
                },
                "quantity": {
                  "type": "integer",
                  "minimum": 1
                },
                "preferred_outcome_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "reason_id": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "comment": {
            "description": "A comment provided to the merchant for review",
            "type": "string"
          }
        },
        "title": "CreateReturnRequest"
      },
      "CreateReturnRequestItem": {
        "type": "object",
        "required": [
          "reference_id",
          "quantity",
          "preferred_outcome_id",
          "reason_id"
        ],
        "properties": {
          "reference_id": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The reference type",
                "enum": [
                  "ORDER_PRODUCT"
                ]
              },
              "value": {
                "type": "string",
                "description": "The value identifying the returned item"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          "quantity": {
            "type": "integer",
            "minimum": 1
          },
          "preferred_outcome_id": {
            "type": "integer",
            "format": "int64"
          },
          "reason_id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CreateReturn": {
        "type": "object",
        "description": "A view of a return",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "A view of a return item",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The unique identifier of this return item"
                },
                "reference_id": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The reference type",
                      "enum": [
                        "ORDER_PRODUCT"
                      ]
                    },
                    "value": {
                      "type": "string",
                      "description": "The value identifying the returned item"
                    }
                  },
                  "required": [
                    "type",
                    "value"
                  ]
                },
                "quantity": {
                  "type": "integer",
                  "description": "The quantity of items for which a return was requested"
                },
                "total": {
                  "type": "string",
                  "format": "decimal",
                  "description": "The total price of the line item"
                },
                "preferred_outcome": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Unique identifier of the preferred outcome"
                    },
                    "label": {
                      "type": "string",
                      "description": "A displayable label for the preferred outcome"
                    }
                  }
                },
                "reason": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Unique identifier of the reason"
                    },
                    "label": {
                      "type": "string",
                      "description": "A displayable label for the reason"
                    }
                  }
                },
                "received_state": {
                  "type": "object",
                  "properties": {
                    "received_quantity": {
                      "type": "integer",
                      "description": "The quantity of items marked as received by the merchant"
                    },
                    "pending_quantity": {
                      "type": "integer",
                      "description": "The quantity of items pending receipt by the merchant"
                    }
                  }
                },
                "review_state": {
                  "type": "object",
                  "properties": {
                    "approved_quantity": {
                      "type": "integer",
                      "description": "The quantity of items approved for return by the merchant"
                    },
                    "pending_quantity": {
                      "type": "integer",
                      "description": "The quantity of items pending receipt by the merchant"
                    },
                    "rejected_quantity": {
                      "type": "integer",
                      "description": "The quantity of items rejected by the merchant"
                    }
                  }
                }
              }
            }
          },
          "total": {
            "type": "string",
            "format": "decimal",
            "description": "The total price of the items being returned"
          },
          "currency": {
            "type": "string",
            "format": "iso-4217",
            "description": "The transactional currency of the return and the associated order"
          },
          "customer": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "email": {
                "type": "string",
                "format": "email"
              }
            }
          },
          "comment": {
            "type": "string",
            "description": "A comment provided to the merchant for review"
          },
          "status": {
            "type": "string",
            "enum": [
              "CLOSED",
              "OPEN",
              "REMOVED"
            ],
            "description": "The status of the return.",
            "title": "Status_Full"
          },
          "date_modified": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Return_Full": {
        "type": "object",
        "description": "A view of a return",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "A view of a return item",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The unique identifier of this return item"
                },
                "reference_id": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The reference type",
                      "enum": [
                        "ORDER_PRODUCT"
                      ]
                    },
                    "value": {
                      "type": "string",
                      "description": "The value identifying the returned item"
                    }
                  },
                  "required": [
                    "type",
                    "value"
                  ]
                },
                "quantity": {
                  "type": "integer",
                  "description": "The quantity of items for which a return was requested"
                },
                "total": {
                  "type": "string",
                  "format": "decimal",
                  "description": "The total price of the line item"
                },
                "preferred_outcome": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Unique identifier of the preferred outcome"
                    },
                    "label": {
                      "type": "string",
                      "description": "A displayable label for the preferred outcome"
                    }
                  }
                },
                "reason": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Unique identifier of the reason"
                    },
                    "label": {
                      "type": "string",
                      "description": "A displayable label for the reason"
                    }
                  }
                },
                "received_state": {
                  "type": "object",
                  "properties": {
                    "received_quantity": {
                      "type": "integer",
                      "description": "The quantity of items marked as received by the merchant"
                    },
                    "pending_quantity": {
                      "type": "integer",
                      "description": "The quantity of items pending receipt by the merchant"
                    }
                  }
                },
                "review_state": {
                  "type": "object",
                  "properties": {
                    "approved_quantity": {
                      "type": "integer",
                      "description": "The quantity of items approved for return by the merchant"
                    },
                    "pending_quantity": {
                      "type": "integer",
                      "description": "The quantity of items pending receipt by the merchant"
                    },
                    "rejected_quantity": {
                      "type": "integer",
                      "description": "The quantity of items rejected by the merchant"
                    }
                  }
                }
              }
            }
          },
          "total": {
            "type": "string",
            "format": "decimal",
            "description": "The total price of the items being returned"
          },
          "currency": {
            "type": "string",
            "format": "iso-4217",
            "description": "The transactional currency of the return and the associated order"
          },
          "customer": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "email": {
                "type": "string",
                "format": "email"
              }
            }
          },
          "comment": {
            "type": "string",
            "description": "A comment provided to the merchant for review"
          },
          "status": {
            "type": "string",
            "enum": [
              "CLOSED",
              "OPEN",
              "REMOVED"
            ],
            "description": "The status of the return.",
            "title": "Status_Full"
          },
          "date_modified": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ReturnItem": {
        "type": "object",
        "description": "A view of a return item",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "The unique identifier of this return item"
          },
          "reference_id": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "The reference type",
                "enum": [
                  "ORDER_PRODUCT"
                ]
              },
              "value": {
                "type": "string",
                "description": "The value identifying the returned item"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of items for which a return was requested"
          },
          "total": {
            "type": "string",
            "format": "decimal",
            "description": "The total price of the line item"
          },
          "preferred_outcome": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "description": "Unique identifier of the preferred outcome"
              },
              "label": {
                "type": "string",
                "description": "A displayable label for the preferred outcome"
              }
            }
          },
          "reason": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "description": "Unique identifier of the reason"
              },
              "label": {
                "type": "string",
                "description": "A displayable label for the reason"
              }
            }
          },
          "received_state": {
            "type": "object",
            "properties": {
              "received_quantity": {
                "type": "integer",
                "description": "The quantity of items marked as received by the merchant"
              },
              "pending_quantity": {
                "type": "integer",
                "description": "The quantity of items pending receipt by the merchant"
              }
            }
          },
          "review_state": {
            "type": "object",
            "properties": {
              "approved_quantity": {
                "type": "integer",
                "description": "The quantity of items approved for return by the merchant"
              },
              "pending_quantity": {
                "type": "integer",
                "description": "The quantity of items pending receipt by the merchant"
              },
              "rejected_quantity": {
                "type": "integer",
                "description": "The quantity of items rejected by the merchant"
              }
            }
          }
        }
      },
      "StatusUpdate_Full": {
        "type": "object",
        "properties": {
          "return_id": {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the return for which the status should be updated"
          },
          "new_status": {
            "type": "string",
            "enum": [
              "CLOSED",
              "OPEN",
              "REMOVED"
            ],
            "description": "The status of the return.",
            "title": "Status_Full"
          }
        },
        "title": "StatusUpdate_Full"
      },
      "Status_Full": {
        "type": "string",
        "enum": [
          "CLOSED",
          "OPEN",
          "REMOVED"
        ],
        "description": "The status of the return.",
        "title": "Status_Full"
      },
      "UpdateReturnStatusesRequest": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "return_id": {
              "type": "integer",
              "format": "int64",
              "description": "The ID of the return for which the status should be updated"
            },
            "new_status": {
              "type": "string",
              "enum": [
                "CLOSED",
                "OPEN",
                "REMOVED"
              ],
              "description": "The status of the return.",
              "title": "Status_Full"
            }
          },
          "title": "StatusUpdate_Full"
        },
        "title": "UpdateReturnStatusesRequest"
      },
      "UpdateReturnStatuses": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64",
              "description": "The ID of the return for which the status was updated"
            },
            "status": {
              "type": "string",
              "enum": [
                "CLOSED",
                "OPEN",
                "REMOVED"
              ],
              "description": "The status of the return.",
              "title": "Status_Full"
            }
          }
        }
      },
      "Problem": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "description": "Status code of the problem"
          },
          "title": {
            "type": "string",
            "description": "A short description of the problem"
          },
          "type": {
            "type": "string",
            "format": "url",
            "description": "A resource describing the problem"
          }
        }
      },
      "BatchOperationMeta": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "The total number of operations in the batch"
          },
          "success": {
            "type": "integer",
            "description": "The number of failed operations in the batch"
          },
          "failed": {
            "type": "integer",
            "description": "The number of failed operations in the batch"
          }
        }
      },
      "Pagination": {
        "type": "object",
        "description": "Data about the response, including pagination and collection totals.",
        "title": "Pagination",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number of items in the result set.\n",
            "example": 36
          },
          "count": {
            "type": "integer",
            "description": "Total number of items in the collection response.\n",
            "example": 36
          },
          "per_page": {
            "type": "integer",
            "description": "The amount of items returned in the collection per page, controlled by the limit parameter.\n",
            "example": 50
          },
          "current_page": {
            "type": "integer",
            "description": "The page you are currently on within the collection.\n",
            "example": 1
          },
          "total_pages": {
            "type": "integer",
            "description": "The total number of pages in the collection.\n",
            "example": 1
          },
          "links": {
            "type": "object",
            "description": "Pagination links for the previous and next parts of the whole collection.\n",
            "properties": {
              "previous": {
                "type": "string",
                "description": "Link to the previous page returned in the response.\n"
              },
              "current": {
                "type": "string",
                "description": "Link to the current page returned in the response.\n",
                "example": "?page=1&limit=50"
              },
              "next": {
                "type": "string",
                "description": "Link to the next page returned in the response.\n"
              }
            }
          }
        }
      },
      "ReceivedItems_Put": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "item_id",
            "received_quantity",
            "pending_quantity"
          ],
          "properties": {
            "item_id": {
              "type": "integer",
              "format": "int64",
              "description": "The ID of the item for which to update the received state"
            },
            "received_quantity": {
              "type": "integer",
              "description": "The quantity of items to be marked as received"
            },
            "pending_quantity": {
              "type": "integer",
              "description": "The quantity of items to be marked as pending"
            }
          }
        },
        "title": "ReceivedItems_Put"
      },
      "ReceivedItems_Base": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "item_id": {
              "type": "integer",
              "format": "int64",
              "description": "The ID of the item for which received item status was updated"
            },
            "received_quantity": {
              "type": "integer",
              "format": "int64",
              "description": "The quantity of items marked as received"
            },
            "pending_quantity": {
              "type": "integer",
              "format": "int64",
              "description": "The quantity of items marked as pending"
            }
          }
        },
        "title": "ReceivedItems_Base"
      },
      "ReviewedItems_Put": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "item_id",
            "authorized_quantity",
            "rejected_quantity",
            "pending_quantity"
          ],
          "properties": {
            "item_id": {
              "type": "integer",
              "format": "int64",
              "description": "The ID of the item for which to update the reviewed state"
            },
            "authorized_quantity": {
              "type": "integer",
              "description": "The quantity of items to be marked as authorized"
            },
            "rejected_quantity": {
              "type": "integer",
              "description": "The quantity of items to be marked as rejected"
            },
            "pending_quantity": {
              "type": "integer",
              "description": "The quantity of items to be marked as pending"
            }
          }
        },
        "title": "ReviewedItems_Put"
      },
      "ReviewedItems_Base": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "item_id": {
              "type": "integer",
              "format": "int64",
              "description": "The ID of the item for which reviewed status was updated"
            },
            "authorized_quantity": {
              "type": "integer",
              "format": "int64",
              "description": "The quantity of items marked as authorized"
            },
            "rejected_quantity": {
              "type": "integer",
              "format": "int64",
              "description": "The quantity of items marked as rejected"
            },
            "pending_quantity": {
              "type": "integer",
              "format": "int64",
              "description": "The quantity of items marked as pending"
            }
          }
        },
        "title": "ReviewedItems_Base"
      },
      "GetReturnableItems": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "reference_id": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The reference type",
                  "enum": [
                    "ORDER_PRODUCT"
                  ]
                },
                "value": {
                  "type": "string",
                  "description": "The value identifying the returned item"
                }
              },
              "required": [
                "type",
                "value"
              ]
            },
            "name": {
              "type": "string",
              "description": "The name of the order product"
            },
            "returnable_quantity": {
              "type": "integer",
              "description": "The maximum quantity of this item that can presently be requested for return"
            },
            "total": {
              "type": "string",
              "format": "decimal",
              "description": "The total price of this line item"
            },
            "options": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "display_name": {
                    "type": "string",
                    "description": "A displayable name for the option"
                  },
                  "display_value": {
                    "type": "string",
                    "description": "A displayable value for the option"
                  }
                },
                "description": "An item available for return"
              },
              "description": "A collection of options configured for the order product"
            }
          }
        }
      },
      "ItemReferenceId": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The reference type",
            "enum": [
              "ORDER_PRODUCT"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value identifying the returned item"
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "CollectionMeta": {
        "type": "object",
        "description": "Data about the response, including pagination and collection totals.",
        "properties": {
          "pagination": {
            "type": "object",
            "description": "Data about the response, including pagination and collection totals.",
            "title": "Pagination",
            "properties": {
              "total": {
                "type": "integer",
                "description": "Total number of items in the result set.\n",
                "example": 36
              },
              "count": {
                "type": "integer",
                "description": "Total number of items in the collection response.\n",
                "example": 36
              },
              "per_page": {
                "type": "integer",
                "description": "The amount of items returned in the collection per page, controlled by the limit parameter.\n",
                "example": 50
              },
              "current_page": {
                "type": "integer",
                "description": "The page you are currently on within the collection.\n",
                "example": 1
              },
              "total_pages": {
                "type": "integer",
                "description": "The total number of pages in the collection.\n",
                "example": 1
              },
              "links": {
                "type": "object",
                "description": "Pagination links for the previous and next parts of the whole collection.\n",
                "properties": {
                  "previous": {
                    "type": "string",
                    "description": "Link to the previous page returned in the response.\n"
                  },
                  "current": {
                    "type": "string",
                    "description": "Link to the current page returned in the response.\n",
                    "example": "?page=1&limit=50"
                  },
                  "next": {
                    "type": "string",
                    "description": "Link to the next page returned in the response.\n"
                  }
                }
              }
            }
          }
        },
        "title": "Collection Meta"
      },
      "Meta": {
        "type": "object",
        "title": "Meta",
        "properties": {
          "meta": {
            "type": "object",
            "description": "Data about the response, including pagination and collection totals.",
            "title": "Pagination",
            "properties": {
              "total": {
                "type": "integer",
                "description": "Total number of items in the result set.\n",
                "example": 36
              },
              "count": {
                "type": "integer",
                "description": "Total number of items in the collection response.\n",
                "example": 36
              },
              "per_page": {
                "type": "integer",
                "description": "The amount of items returned in the collection per page, controlled by the limit parameter.\n",
                "example": 50
              },
              "current_page": {
                "type": "integer",
                "description": "The page you are currently on within the collection.\n",
                "example": 1
              },
              "total_pages": {
                "type": "integer",
                "description": "The total number of pages in the collection.\n",
                "example": 1
              },
              "links": {
                "type": "object",
                "description": "Pagination links for the previous and next parts of the whole collection.\n",
                "properties": {
                  "previous": {
                    "type": "string",
                    "description": "Link to the previous page returned in the response.\n"
                  },
                  "current": {
                    "type": "string",
                    "description": "Link to the current page returned in the response.\n",
                    "example": "?page=1&limit=50"
                  },
                  "next": {
                    "type": "string",
                    "description": "Link to the next page returned in the response.\n"
                  }
                }
              }
            }
          }
        }
      },
      "ErrorResponse": {
        "allOf": [
          {
            "type": "object",
            "title": "error_Base",
            "properties": {
              "status": {
                "description": "The HTTP status code.\n",
                "type": "integer"
              },
              "title": {
                "description": "The error title describing the particular error.\n",
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            },
            "description": "Error payload for the BigCommerce API."
          },
          {
            "type": "object",
            "properties": {
              "errors": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "title": "DetailedErrors"
              }
            }
          }
        ],
        "title": "ErrorResponse"
      },
      "DetailedErrors": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        },
        "title": "DetailedErrors"
      },
      "Transaction_Post": {
        "type": "object",
        "title": "Transaction_Post",
        "properties": {
          "event": {
            "type": "string",
            "description": "Store event that created the transaction.\n",
            "enum": [
              "purchase",
              "authorization",
              "capture",
              "refund",
              "void",
              "pending",
              "settled"
            ]
          },
          "method": {
            "type": "string",
            "description": "The payment method: `credit_card` - a credit-card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site (e.g., PayPal); `offline` - payment method that takes place offline.\n",
            "enum": [
              "credit_card",
              "electronic_wallet",
              "gift_certificate",
              "store_credit",
              "apple_pay_card",
              "apple_pay_token",
              "token",
              "custom",
              "offsite",
              "offline",
              "nonce"
            ]
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "Amount of money in the transaction.\n"
          },
          "currency": {
            "type": "string",
            "format": "ISO-4217",
            "description": "Currency used for the transaction.\n"
          },
          "gateway": {
            "type": "string",
            "description": "The payment gateway, where applicable.\n",
            "enum": [
              "2checkout",
              "adyen",
              "amazon",
              "authorizenet",
              "bankdeposit",
              "braintree",
              "cheque",
              "cod",
              "custom",
              "firstdatagge4",
              "giftcertificate",
              "hps",
              "instore",
              "klarna",
              "migs",
              "moneyorder",
              "nmi",
              "paypalexpress",
              "paypalpaymentsprous",
              "paypalpaymentsprouk",
              "plugnpay",
              "qbmsv2",
              "securenet",
              "square",
              "storecredit",
              "stripe",
              "testgateway",
              "usaepay"
            ]
          },
          "gateway_transaction_id": {
            "description": "The transaction ID returned by the payment gateway for this transaction item.\n",
            "type": "string"
          },
          "date_created": {
            "description": "The datetime of the transaction.\n",
            "type": "string",
            "format": "date-time"
          },
          "test": {
            "type": "boolean",
            "description": "True if the transaction performed was a test, or if the gateway is in test mode.\n"
          },
          "status": {
            "type": "string",
            "description": "Status of the transaction.\n",
            "enum": [
              "ok",
              "error"
            ]
          },
          "fraud_review": {
            "type": "boolean",
            "description": "Result of gateway fraud review, if any. Default is `false`.\n"
          },
          "reference_transaction_id": {
            "type": "integer",
            "description": "Identifier for an existing transaction upon which this transaction acts.\n"
          },
          "offline": {
            "type": "object",
            "description": "Offline payment (e.g., check or purchase order).",
            "properties": {
              "display_name": {
                "description": "Display name for the offline payment.\n",
                "type": "string"
              }
            },
            "title": "Offline"
          },
          "custom": {
            "type": "object",
            "description": "Custom payment from manual order.",
            "properties": {
              "payment_method": {
                "description": "Text entered for the payment method in the control panel.\n",
                "type": "string"
              }
            },
            "title": "Custom"
          }
        },
        "required": [
          "event",
          "method",
          "amount",
          "currency",
          "gateway"
        ]
      },
      "NotFound": {
        "description": "Error payload for the BigCommerce API.",
        "type": "object",
        "properties": {
          "status": {
            "description": "404 HTTP status code.\n",
            "type": "integer"
          },
          "title": {
            "description": "The error title describing the particular error.",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "instance": {
            "type": "string"
          }
        },
        "title": "Not Found"
      },
      "Transaction": {
        "description": "A BigCommerce Transaction object describes a single transaction.",
        "allOf": [
          {
            "title": "Transaction Base",
            "properties": {
              "event": {
                "type": "string",
                "description": "Store event that created the transaction.\n",
                "enum": [
                  "purchase",
                  "authorization",
                  "capture",
                  "refund",
                  "void",
                  "pending",
                  "settled"
                ]
              },
              "method": {
                "type": "string",
                "description": "The payment method: `credit_card` - a credit-card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site; `offline` - payment method that takes place offline.\n",
                "enum": [
                  "credit_card",
                  "electronic_wallet",
                  "gift_certificate",
                  "store_credit",
                  "apple_pay_card",
                  "apple_pay_token",
                  "token",
                  "custom",
                  "offsite",
                  "offline",
                  "nonce"
                ]
              },
              "amount": {
                "type": "number",
                "format": "float",
                "description": "Amount of money in the transaction.\n"
              },
              "currency": {
                "type": "string",
                "format": "ISO-4217",
                "description": "Currency used for the transaction.\n"
              },
              "gateway": {
                "type": "string",
                "description": "The payment gateway, where applicable.\n",
                "enum": [
                  "2checkout",
                  "adyen",
                  "amazon",
                  "authorizenet",
                  "bankdeposit",
                  "braintree",
                  "cheque",
                  "cod",
                  "custom",
                  "firstdatagge4",
                  "giftcertificate",
                  "hps",
                  "instore",
                  "klarna",
                  "migs",
                  "moneyorder",
                  "nmi",
                  "paypalexpress",
                  "paypalpaymentsprous",
                  "paypalpaymentsprouk",
                  "plugnpay",
                  "qbmsv2",
                  "securenet",
                  "square",
                  "storecredit",
                  "stripe",
                  "testgateway",
                  "usaepay"
                ]
              },
              "gateway_transaction_id": {
                "description": "The transaction ID returned by the payment gateway for this transaction item.\n",
                "type": "string"
              },
              "date_created": {
                "description": "The datetime of the transaction.\n",
                "type": "string",
                "format": "date-time"
              },
              "test": {
                "type": "boolean",
                "description": "True if the transaction performed was a test, or if the gateway is in test mode.\n"
              },
              "status": {
                "type": "string",
                "description": "Status of the transaction.\n",
                "enum": [
                  "ok",
                  "error"
                ]
              },
              "fraud_review": {
                "type": "boolean",
                "description": "Result of gateway fraud review, if any. Default is `false`.\n"
              },
              "reference_transaction_id": {
                "type": "integer",
                "description": "Identifier for an existing transaction upon which this transaction acts.\n"
              },
              "offline": {
                "type": "object",
                "description": "Offline payment (e.g., check or purchase order).",
                "title": "Offline",
                "properties": {
                  "display_name": {
                    "description": "Display name for the offline payment.\n",
                    "type": "string"
                  }
                }
              },
              "custom": {
                "type": "object",
                "description": "Custom payment from manual order.",
                "title": "Custom",
                "properties": {
                  "payment_method": {
                    "description": "Text entered for the payment method in the control panel.\n",
                    "type": "string"
                  }
                }
              },
              "payment_method_id": {
                "type": "string",
                "description": "The payment method ID used for this transaction\n"
              }
            },
            "required": [
              "event",
              "method",
              "amount",
              "currency",
              "gateway"
            ]
          },
          {
            "properties": {
              "id": {
                "type": "integer",
                "description": "Unique identifier for the transaction.\n"
              },
              "order_id": {
                "type": "string",
                "description": "Identifier for the BigCommerce Order with which this transaction is associated.\n"
              },
              "date_created": {
                "description": "The datetime of the transaction.\n",
                "type": "string",
                "format": "date-time"
              },
              "payment_instrument_token": {
                "type": "string",
                "description": "This field contains internal BigPay token for stored card that is then mapped to the actual third-party token. We currently do not offer a way to get third party tokens.These tokens are read-only and do not return any information about the payment."
              },
              "avs_result": {
                "description": "Address Verification Service (AVS) result from the payment gateway.",
                "type": "object",
                "title": "AVS Results",
                "properties": {
                  "code": {
                    "description": "AVS code.",
                    "type": "string"
                  },
                  "message": {
                    "description": "AVS message.",
                    "type": "string"
                  },
                  "street_match": {
                    "description": "AVS Code for street matching result.",
                    "type": "string"
                  },
                  "postal_match": {
                    "description": "AVS Code for postal matching result.",
                    "type": "string"
                  }
                }
              },
              "cvv_result": {
                "description": "Card Verification Value result from the payment gateway.",
                "type": "object",
                "title": "CVV Result",
                "properties": {
                  "code": {
                    "description": "CVV code.",
                    "type": "string"
                  },
                  "message": {
                    "description": "CVV message.",
                    "type": "string"
                  }
                }
              },
              "credit_card": {
                "type": "object",
                "description": "A credit-card model.",
                "title": "Credit Card",
                "properties": {
                  "card_type": {
                    "type": "string",
                    "enum": [
                      "alelo",
                      "alia",
                      "american_express",
                      "cabal",
                      "carnet",
                      "dankort",
                      "diners_club",
                      "discover",
                      "elo",
                      "forbrugsforeningen",
                      "jcb",
                      "maestro",
                      "master",
                      "naranja",
                      "sodexo",
                      "unionpay",
                      "visa",
                      "vr"
                    ],
                    "description": "**Allowed values**: alelo, alia, american_express, cabal, carnet, dankort, diners_club, discover, elo, forbrugsforeningen, jcb, maestro, master, naranja, sodexo, unionpay, visa, vr"
                  },
                  "card_iin": {
                    "description": "The IIN of a credit-card number.\n",
                    "type": "string"
                  },
                  "card_last4": {
                    "description": "The last 4 digits of a credit-card number.\n",
                    "type": "string"
                  },
                  "card_expiry_month": {
                    "description": "The expiry month of a credit-card.\n",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 12
                  },
                  "card_expiry_year": {
                    "description": "The expiry year of a credit-card.\n",
                    "type": "integer"
                  }
                }
              },
              "gift_certificate": {
                "type": "object",
                "description": "A gift-certificate model.",
                "title": "Gift Certificate",
                "properties": {
                  "code": {
                    "description": "The gift-certificate code.\n",
                    "type": "string",
                    "example": "MB345"
                  },
                  "original_balance": {
                    "description": "The balance on a gift certificate when it was purchased.\n",
                    "type": "number",
                    "format": "float",
                    "example": 100
                  },
                  "starting_balance": {
                    "description": "The balance on a gift certificate at the time of this purchase.\n",
                    "type": "number",
                    "format": "float",
                    "example": 100
                  },
                  "remaining_balance": {
                    "description": "The remaining balance on a gift certificate.\n",
                    "type": "number",
                    "format": "float",
                    "example": 35.42
                  },
                  "status": {
                    "description": "The status of a gift certificate: `active` - gift certificate is active; `pending` - gift certificate purchase is pending; `disabled` - gift certificate is disabled; `expired` - gift certificate is expired.\n",
                    "type": "string",
                    "enum": [
                      "active",
                      "pending",
                      "disabled",
                      "expired"
                    ]
                  }
                }
              },
              "store_credit": {
                "type": "object",
                "description": "A store credit model.\n",
                "properties": {
                  "remaining_balance": {
                    "description": "Remaining balance of shopper's store credit.\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "title": "Transaction",
        "type": "object"
      },
      "CreditCard": {
        "type": "object",
        "description": "A credit-card model.",
        "title": "Credit Card",
        "properties": {
          "card_type": {
            "type": "string",
            "enum": [
              "alelo",
              "alia",
              "american_express",
              "cabal",
              "carnet",
              "dankort",
              "diners_club",
              "discover",
              "elo",
              "forbrugsforeningen",
              "jcb",
              "maestro",
              "master",
              "naranja",
              "sodexo",
              "unionpay",
              "visa",
              "vr"
            ],
            "description": "**Allowed values**: alelo, alia, american_express, cabal, carnet, dankort, diners_club, discover, elo, forbrugsforeningen, jcb, maestro, master, naranja, sodexo, unionpay, visa, vr"
          },
          "card_iin": {
            "description": "The IIN of a credit-card number.\n",
            "type": "string"
          },
          "card_last4": {
            "description": "The last 4 digits of a credit-card number.\n",
            "type": "string"
          },
          "card_expiry_month": {
            "description": "The expiry month of a credit-card.\n",
            "type": "integer",
            "minimum": 1,
            "maximum": 12
          },
          "card_expiry_year": {
            "description": "The expiry year of a credit-card.\n",
            "type": "integer"
          }
        }
      },
      "StoreCredit": {
        "type": "object",
        "description": "A store credit model.\n",
        "properties": {
          "remaining_balance": {
            "description": "Remaining balance of shopper's store credit.\n",
            "type": "string"
          }
        }
      },
      "Custom": {
        "type": "object",
        "description": "Custom payment from manual order.",
        "properties": {
          "payment_method": {
            "description": "Text entered for the payment method in the control panel.\n",
            "type": "string"
          }
        },
        "title": "Custom"
      },
      "Offline": {
        "type": "object",
        "description": "Offline payment (e.g., check or purchase order).",
        "properties": {
          "display_name": {
            "description": "Display name for the offline payment.\n",
            "type": "string"
          }
        },
        "title": "Offline"
      },
      "GiftCertificate": {
        "type": "object",
        "description": "A gift-certificate model.",
        "title": "Gift Certificate",
        "properties": {
          "code": {
            "description": "The gift-certificate code.\n",
            "type": "string",
            "example": "MB345"
          },
          "original_balance": {
            "description": "The balance on a gift certificate when it was purchased.\n",
            "type": "number",
            "format": "float",
            "example": 100
          },
          "starting_balance": {
            "description": "The balance on a gift certificate at the time of this purchase.\n",
            "type": "number",
            "format": "float",
            "example": 100
          },
          "remaining_balance": {
            "description": "The remaining balance on a gift certificate.\n",
            "type": "number",
            "format": "float",
            "example": 35.42
          },
          "status": {
            "description": "The status of a gift certificate: `active` - gift certificate is active; `pending` - gift certificate purchase is pending; `disabled` - gift certificate is disabled; `expired` - gift certificate is expired.\n",
            "type": "string",
            "enum": [
              "active",
              "pending",
              "disabled",
              "expired"
            ]
          }
        }
      },
      "AVSResult": {
        "description": "Address Verification Service (AVS) result from the payment gateway.",
        "type": "object",
        "properties": {
          "code": {
            "description": "AVS code.",
            "type": "string"
          },
          "message": {
            "description": "AVS message.",
            "type": "string"
          },
          "street_match": {
            "description": "AVS Code for street matching result.",
            "type": "string"
          },
          "postal_match": {
            "description": "AVS Code for postal matching result.",
            "type": "string"
          }
        },
        "title": "AVS Results"
      },
      "CVVResult": {
        "description": "Card Verification Value result from the payment gateway.",
        "type": "object",
        "properties": {
          "code": {
            "description": "CVV code.",
            "type": "string"
          },
          "message": {
            "description": "CVV message.",
            "type": "string"
          }
        },
        "title": "CVV Result"
      },
      "NoContent": {
        "description": "No-content response for the BigCommerce API.",
        "type": "object",
        "properties": {
          "status": {
            "description": "204 HTTP status code.\n",
            "type": "integer"
          },
          "title": {
            "description": "The error title describing the situation.",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "instance": {
            "type": "string"
          }
        },
        "title": "No Content"
      },
      "metaEmpty_Full": {
        "type": "object",
        "title": "metaEmpty_Full"
      },
      "pagination_Full": {
        "type": "object",
        "title": "pagination_Full",
        "properties": {
          "total": {
            "description": "Total number of items in the result set.",
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "description": "Total number of items in the collection response.",
            "type": "integer",
            "format": "int32"
          },
          "per_page": {
            "description": "The amount of items returned in the collection per page, controlled by the limit parameter.",
            "type": "integer",
            "format": "int32"
          },
          "current_page": {
            "description": "The page you are currently on within the collection.",
            "type": "integer",
            "format": "int32"
          },
          "total_pages": {
            "description": "The total number of pages in the collection.",
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "type": "object",
            "properties": {
              "previous": {
                "type": "string",
                "description": "Link to the previous page returned in the response.\n"
              },
              "current": {
                "type": "string",
                "description": "Link to the current page returned in the response.\n",
                "example": "?page=1&limit=50"
              },
              "next": {
                "type": "string",
                "description": "Link to the next page returned in the response.\n"
              }
            },
            "title": "links_Full"
          }
        }
      },
      "metaCollection_Full": {
        "type": "object",
        "title": "metaCollection_Full",
        "properties": {
          "pagination": {
            "type": "object",
            "title": "pagination_Full",
            "properties": {
              "total": {
                "description": "Total number of items in the result set.",
                "type": "integer",
                "format": "int32"
              },
              "count": {
                "description": "Total number of items in the collection response.",
                "type": "integer",
                "format": "int32"
              },
              "per_page": {
                "description": "The amount of items returned in the collection per page, controlled by the limit parameter.",
                "type": "integer",
                "format": "int32"
              },
              "current_page": {
                "description": "The page you are currently on within the collection.",
                "type": "integer",
                "format": "int32"
              },
              "total_pages": {
                "description": "The total number of pages in the collection.",
                "type": "integer",
                "format": "int32"
              },
              "links": {
                "type": "object",
                "properties": {
                  "previous": {
                    "type": "string",
                    "description": "Link to the previous page returned in the response.\n"
                  },
                  "current": {
                    "type": "string",
                    "description": "Link to the current page returned in the response.\n",
                    "example": "?page=1&limit=50"
                  },
                  "next": {
                    "type": "string",
                    "description": "Link to the next page returned in the response.\n"
                  }
                },
                "title": "links_Full"
              }
            }
          }
        }
      },
      "links_Full": {
        "type": "object",
        "properties": {
          "previous": {
            "type": "string",
            "description": "Link to the previous page returned in the response.\n"
          },
          "current": {
            "type": "string",
            "description": "Link to the current page returned in the response.\n",
            "example": "?page=1&limit=50"
          },
          "next": {
            "type": "string",
            "description": "Link to the next page returned in the response.\n"
          }
        },
        "title": "links_Full"
      },
      "error_Base": {
        "type": "object",
        "title": "error_Base",
        "properties": {
          "status": {
            "description": "The HTTP status code.\n",
            "type": "integer"
          },
          "title": {
            "description": "The error title describing the particular error.\n",
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "description": "Error payload for the BigCommerce API."
      },
      "errorDetailed_Full": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "title": "DetailedErrors"
          }
        },
        "title": "errorDetailed_Full"
      },
      "PostRefundQuotesRequest": {
        "type": "array",
        "description": "Request body for batch refund quotes.",
        "title": "Refund Quotes Request - BATCH",
        "items": {
          "type": "object",
          "title": "RefundQuote_Post",
          "description": "Request body for refund quotes.",
          "properties": {
            "order_id": {
              "type": "integer",
              "description": "Order ID against which this refund will be created. This is optional for creating a single refund request. The order ID is included in the request path.",
              "example": 1
            },
            "items": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "object",
                    "title": "Amount Bound Item",
                    "description": "Amount Bound Item\n\nType of refund item that capture refunding of items in the order that are of type amount.\n* `SHIPPING`\n* `HANDLING`\n",
                    "properties": {
                      "item_type": {
                        "type": "string",
                        "enum": [
                          "SHIPPING",
                          "HANDLING"
                        ],
                        "example": "SHIPPING",
                        "description": "Type of refund."
                      },
                      "item_id": {
                        "type": "integer",
                        "example": 1,
                        "description": "Order address ID."
                      },
                      "amount": {
                        "type": "number",
                        "format": "float",
                        "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                        "example": 1.99,
                        "title": "Amount"
                      },
                      "reason": {
                        "type": "string",
                        "minLength": 0,
                        "maxLength": 1000
                      }
                    }
                  },
                  {
                    "type": "object",
                    "title": "Quantity Bound Item",
                    "description": "Quantity Bound Item\n\nType of refund item that capture refunding of items in the order that are of type quantity.\n* `PRODUCT`\n* `GIFT_WRAPPING`\n",
                    "properties": {
                      "item_type": {
                        "type": "string",
                        "enum": [
                          "PRODUCT",
                          "GIFT_WRAPPING"
                        ],
                        "description": "Type of refund."
                      },
                      "item_id": {
                        "type": "integer",
                        "example": 1,
                        "description": "Order Product ID. "
                      },
                      "quantity": {
                        "type": "integer",
                        "example": 3
                      },
                      "reason": {
                        "type": "string",
                        "description": "Reason for refund",
                        "minLength": 0,
                        "maxLength": 1000
                      }
                    }
                  },
                  {
                    "type": "object",
                    "title": "Tax Exempt Item",
                    "description": "Tax Exempt Item",
                    "properties": {
                      "item_type": {
                        "type": "string",
                        "description": "Type of refund.",
                        "example": "ORDER",
                        "enum": [
                          "ORDER"
                        ]
                      },
                      "amount": {
                        "type": "number",
                        "format": "float",
                        "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                        "example": 1.99,
                        "title": "Amount"
                      },
                      "reason": {
                        "type": "string",
                        "description": "Reason for the refund.",
                        "minLength": 0,
                        "maxLength": 1000
                      },
                      "item_id": {
                        "type": "integer",
                        "description": "Order Product ID."
                      }
                    }
                  }
                ]
              },
              "title": "ItemsRefund"
            }
          },
          "required": [
            "order_id",
            "items"
          ]
        }
      },
      "RefundQuote_Post": {
        "type": "object",
        "title": "RefundQuote_Post",
        "description": "Request body for refund quotes.",
        "properties": {
          "order_id": {
            "type": "integer",
            "description": "Order ID against which this refund will be created. This is optional for creating a single refund request. The order ID is included in the request path.",
            "example": 1
          },
          "items": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "object",
                  "title": "Amount Bound Item",
                  "description": "Amount Bound Item\n\nType of refund item that capture refunding of items in the order that are of type amount.\n* `SHIPPING`\n* `HANDLING`\n",
                  "properties": {
                    "item_type": {
                      "type": "string",
                      "enum": [
                        "SHIPPING",
                        "HANDLING"
                      ],
                      "example": "SHIPPING",
                      "description": "Type of refund."
                    },
                    "item_id": {
                      "type": "integer",
                      "example": 1,
                      "description": "Order address ID."
                    },
                    "amount": {
                      "type": "number",
                      "format": "float",
                      "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                      "example": 1.99,
                      "title": "Amount"
                    },
                    "reason": {
                      "type": "string",
                      "minLength": 0,
                      "maxLength": 1000
                    }
                  }
                },
                {
                  "type": "object",
                  "title": "Quantity Bound Item",
                  "description": "Quantity Bound Item\n\nType of refund item that capture refunding of items in the order that are of type quantity.\n* `PRODUCT`\n* `GIFT_WRAPPING`\n",
                  "properties": {
                    "item_type": {
                      "type": "string",
                      "enum": [
                        "PRODUCT",
                        "GIFT_WRAPPING"
                      ],
                      "description": "Type of refund."
                    },
                    "item_id": {
                      "type": "integer",
                      "example": 1,
                      "description": "Order Product ID. "
                    },
                    "quantity": {
                      "type": "integer",
                      "example": 3
                    },
                    "reason": {
                      "type": "string",
                      "description": "Reason for refund",
                      "minLength": 0,
                      "maxLength": 1000
                    }
                  }
                },
                {
                  "type": "object",
                  "title": "Tax Exempt Item",
                  "description": "Tax Exempt Item",
                  "properties": {
                    "item_type": {
                      "type": "string",
                      "description": "Type of refund.",
                      "example": "ORDER",
                      "enum": [
                        "ORDER"
                      ]
                    },
                    "amount": {
                      "type": "number",
                      "format": "float",
                      "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                      "example": 1.99,
                      "title": "Amount"
                    },
                    "reason": {
                      "type": "string",
                      "description": "Reason for the refund.",
                      "minLength": 0,
                      "maxLength": 1000
                    },
                    "item_id": {
                      "type": "integer",
                      "description": "Order Product ID."
                    }
                  }
                }
              ]
            },
            "title": "ItemsRefund"
          }
        },
        "required": [
          "order_id",
          "items"
        ]
      },
      "RefundQuote_Full": {
        "type": "object",
        "title": "RefundQuote_Full",
        "properties": {
          "order_id": {
            "type": "integer",
            "description": "ID of the order to be refunded"
          },
          "total_refund_amount": {
            "type": "number",
            "format": "float",
            "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
            "example": 1.99,
            "title": "Amount"
          },
          "total_refund_tax_amount": {
            "type": "number",
            "example": 1.95
          },
          "rounding": {
            "type": "number",
            "description": "Indicates rounding value to bring refund_total to an amount refundable via payment providers (in this case to 2 decimal places)"
          },
          "adjustment": {
            "type": "number",
            "format": "float",
            "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
            "example": 1.99,
            "title": "Amount"
          },
          "tax_inclusive": {
            "type": "boolean",
            "description": "Indicate if total_refund_amount includes tax amount"
          },
          "refund_methods": {
            "type": "array",
            "description": "An array of available refund methods.\n\nNote that `refund_methods` is an array of refund methods, with each refund method being an array of payment options.\n\nFor example, if the order was placed by a combination of store credit and bank deposit the  refund methods would be:\n```json\n{\n  \"refund_methods\": [\n    [\n      {\n        \"provider_id\": \"storecredit\",\n        \"provider_description\": \"Store Credit\",\n        \"amount\": 119.35,\n        \"offline\": false,\n        \"offline_provider\": false,\n        \"offline_reason\": \"\"\n      }\n    ],\n    [\n      {\n        \"provider_id\": \"custom\",\n        \"provider_description\": \"Custom\",\n        \"amount\": 119.35,\n        \"offline\": true,\n        \"offline_provider\": true,\n        \"offline_reason\": \"This is an offline payment provider.\"\n      }\n    ],\n    [\n      {\n        \"provider_id\": \"bankdeposit\",\n        \"provider_description\": \"Bank Deposit\",\n        \"amount\": 80.35,\n        \"offline\": true,\n        \"offline_provider\": true,\n        \"offline_reason\": \"This is an offline payment provider.\"\n      },\n      {\n        \"provider_id\": \"storecredit\",\n        \"provider_description\": \"Store Credit\",\n        \"amount\": 39,\n        \"offline\": false,\n        \"offline_provider\": false,\n        \"offline_reason\": \"\"\n      }\n    ]\n  ]\n}\n```\n\nIn this case there are three refund methods available to the merchant:\n1. Refund up to the entire order amount to store credit.\n2. Mark an amount up to the full order amount as refunded externally, through a provider or means not represented directly in BC (\"custom\").\n3. Refund the amount paid by store credit to store credit, and the amount paid by bank deposit via a manual refund, which will be recorded as being refunded against the bank deposit.\n\n>\n\n\n",
            "items": {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "object",
                "example": {
                  "provider_id": "checkout_paypalexpress",
                  "provider_description": "Paypal Express",
                  "amount": 9.99,
                  "offline": true,
                  "offline_provider": true,
                  "offline_reason": "Multiple online refunds are not available"
                },
                "title": "Payment Option",
                "properties": {
                  "provider_id": {
                    "type": "string",
                    "description": "Name of the payment method",
                    "example": "checkout_paypalexpress"
                  },
                  "provider_description": {
                    "type": "string",
                    "description": "Description for payment provider",
                    "example": "Paypal Express"
                  },
                  "amount": {
                    "type": "number",
                    "description": "amount to be refunded via this payment provider",
                    "example": 9.99
                  },
                  "offline": {
                    "type": "boolean",
                    "description": "Indicates the payment must be done offline due to constraints of the payment provider, such as partial refunds not being supported, or it being offline only such as cash on delivery of bank deposit.",
                    "example": true
                  },
                  "offline_provider": {
                    "type": "boolean",
                    "description": "Indicates if the payment provider is a strictly offline provider, such as cash on delivery or bank deposit.",
                    "example": true
                  },
                  "offline_reason": {
                    "type": "string",
                    "description": "Reason the payment option is offline only, if applicable.",
                    "example": "Multiple online refunds are not available"
                  }
                }
              },
              "title": "Refund Method"
            }
          }
        }
      },
      "RefundRequest_Post": {
        "type": "object",
        "description": "Request body for refund requests.",
        "title": "RefundRequest_Post",
        "properties": {
          "order_id": {
            "type": "integer",
            "description": "Order id against which this refund will be created",
            "example": 1
          },
          "items": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "object",
                  "title": "Amount Bound Item",
                  "description": "Amount Bound Item\n\nType of refund item that capture refunding of items in the order that are of type amount.\n* `SHIPPING`\n* `HANDLING`\n",
                  "properties": {
                    "item_type": {
                      "type": "string",
                      "enum": [
                        "SHIPPING",
                        "HANDLING"
                      ],
                      "example": "SHIPPING",
                      "description": "Type of refund."
                    },
                    "item_id": {
                      "type": "integer",
                      "example": 1,
                      "description": "Order address ID."
                    },
                    "amount": {
                      "type": "number",
                      "format": "float",
                      "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                      "example": 1.99,
                      "title": "Amount"
                    },
                    "reason": {
                      "type": "string",
                      "minLength": 0,
                      "maxLength": 1000
                    }
                  }
                },
                {
                  "type": "object",
                  "title": "Quantity Bound Item",
                  "description": "Quantity Bound Item\n\nType of refund item that capture refunding of items in the order that are of type quantity.\n* `PRODUCT`\n* `GIFT_WRAPPING`\n",
                  "properties": {
                    "item_type": {
                      "type": "string",
                      "enum": [
                        "PRODUCT",
                        "GIFT_WRAPPING"
                      ],
                      "description": "Type of refund."
                    },
                    "item_id": {
                      "type": "integer",
                      "example": 1,
                      "description": "Order Product ID. "
                    },
                    "quantity": {
                      "type": "integer",
                      "example": 3
                    },
                    "reason": {
                      "type": "string",
                      "description": "Reason for refund",
                      "minLength": 0,
                      "maxLength": 1000
                    }
                  }
                },
                {
                  "type": "object",
                  "title": "Tax Exempt Item",
                  "description": "Tax Exempt Item",
                  "properties": {
                    "item_type": {
                      "type": "string",
                      "description": "Type of refund.",
                      "example": "ORDER",
                      "enum": [
                        "ORDER"
                      ]
                    },
                    "amount": {
                      "type": "number",
                      "format": "float",
                      "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                      "example": 1.99,
                      "title": "Amount"
                    },
                    "reason": {
                      "type": "string",
                      "description": "Reason for the refund.",
                      "minLength": 0,
                      "maxLength": 1000
                    },
                    "item_id": {
                      "type": "integer",
                      "description": "Order Product ID."
                    }
                  }
                }
              ]
            },
            "title": "ItemsRefund"
          },
          "reason": {
            "type": "string",
            "description": "Reason for refund",
            "example": "Wrong t-shirt size"
          },
          "payments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "provider_id": {
                  "type": "string",
                  "description": "Reference to payment provider",
                  "example": "checkout_paypalexpress"
                },
                "amount": {
                  "type": "number",
                  "description": "Amount refunded via this provider",
                  "example": 9.99
                },
                "offline": {
                  "type": "boolean",
                  "description": "Whether the payment was marked as offline or performed through an online payment service.",
                  "example": true
                }
              },
              "example": "{\n    \"provider_id\": \"checkout_paypalexpress\",\n    \"amount\": 9.99,\n    \"offline\": true\n}",
              "title": "Payment Request"
            }
          }
        },
        "required": [
          "order_id",
          "items",
          "payments"
        ]
      },
      "PostRefundsRequest": {
        "type": "array",
        "description": "Request body for batch refunds",
        "title": "Refunds Request - BATCH",
        "items": {
          "type": "object",
          "description": "Request body for refund requests.",
          "title": "RefundRequest_Post",
          "properties": {
            "order_id": {
              "type": "integer",
              "description": "Order id against which this refund will be created",
              "example": 1
            },
            "items": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "object",
                    "title": "Amount Bound Item",
                    "description": "Amount Bound Item\n\nType of refund item that capture refunding of items in the order that are of type amount.\n* `SHIPPING`\n* `HANDLING`\n",
                    "properties": {
                      "item_type": {
                        "type": "string",
                        "enum": [
                          "SHIPPING",
                          "HANDLING"
                        ],
                        "example": "SHIPPING",
                        "description": "Type of refund."
                      },
                      "item_id": {
                        "type": "integer",
                        "example": 1,
                        "description": "Order address ID."
                      },
                      "amount": {
                        "type": "number",
                        "format": "float",
                        "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                        "example": 1.99,
                        "title": "Amount"
                      },
                      "reason": {
                        "type": "string",
                        "minLength": 0,
                        "maxLength": 1000
                      }
                    }
                  },
                  {
                    "type": "object",
                    "title": "Quantity Bound Item",
                    "description": "Quantity Bound Item\n\nType of refund item that capture refunding of items in the order that are of type quantity.\n* `PRODUCT`\n* `GIFT_WRAPPING`\n",
                    "properties": {
                      "item_type": {
                        "type": "string",
                        "enum": [
                          "PRODUCT",
                          "GIFT_WRAPPING"
                        ],
                        "description": "Type of refund."
                      },
                      "item_id": {
                        "type": "integer",
                        "example": 1,
                        "description": "Order Product ID. "
                      },
                      "quantity": {
                        "type": "integer",
                        "example": 3
                      },
                      "reason": {
                        "type": "string",
                        "description": "Reason for refund",
                        "minLength": 0,
                        "maxLength": 1000
                      }
                    }
                  },
                  {
                    "type": "object",
                    "title": "Tax Exempt Item",
                    "description": "Tax Exempt Item",
                    "properties": {
                      "item_type": {
                        "type": "string",
                        "description": "Type of refund.",
                        "example": "ORDER",
                        "enum": [
                          "ORDER"
                        ]
                      },
                      "amount": {
                        "type": "number",
                        "format": "float",
                        "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                        "example": 1.99,
                        "title": "Amount"
                      },
                      "reason": {
                        "type": "string",
                        "description": "Reason for the refund.",
                        "minLength": 0,
                        "maxLength": 1000
                      },
                      "item_id": {
                        "type": "integer",
                        "description": "Order Product ID."
                      }
                    }
                  }
                ]
              },
              "title": "ItemsRefund"
            },
            "reason": {
              "type": "string",
              "description": "Reason for refund",
              "example": "Wrong t-shirt size"
            },
            "payments": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "provider_id": {
                    "type": "string",
                    "description": "Reference to payment provider",
                    "example": "checkout_paypalexpress"
                  },
                  "amount": {
                    "type": "number",
                    "description": "Amount refunded via this provider",
                    "example": 9.99
                  },
                  "offline": {
                    "type": "boolean",
                    "description": "Whether the payment was marked as offline or performed through an online payment service.",
                    "example": true
                  }
                },
                "example": "{\n    \"provider_id\": \"checkout_paypalexpress\",\n    \"amount\": 9.99,\n    \"offline\": true\n}",
                "title": "Payment Request"
              }
            }
          },
          "required": [
            "order_id",
            "items",
            "payments"
          ]
        }
      },
      "FailedQuoteError": {
        "type": "object",
        "description": "Failed quote response.",
        "properties": {
          "order_id": {
            "type": "integer"
          },
          "status": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 422
          },
          "error": {
            "type": "string",
            "description": "details why the request failed"
          }
        },
        "title": "FailedQuoteError"
      },
      "ItemsRefund": {
        "type": "array",
        "items": {
          "anyOf": [
            {
              "type": "object",
              "title": "Amount Bound Item",
              "description": "Amount Bound Item\n\nType of refund item that capture refunding of items in the order that are of type amount.\n* `SHIPPING`\n* `HANDLING`\n",
              "properties": {
                "item_type": {
                  "type": "string",
                  "enum": [
                    "SHIPPING",
                    "HANDLING"
                  ],
                  "example": "SHIPPING",
                  "description": "Type of refund."
                },
                "item_id": {
                  "type": "integer",
                  "example": 1,
                  "description": "Order address ID."
                },
                "amount": {
                  "type": "number",
                  "format": "float",
                  "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                  "example": 1.99,
                  "title": "Amount"
                },
                "reason": {
                  "type": "string",
                  "minLength": 0,
                  "maxLength": 1000
                }
              }
            },
            {
              "type": "object",
              "title": "Quantity Bound Item",
              "description": "Quantity Bound Item\n\nType of refund item that capture refunding of items in the order that are of type quantity.\n* `PRODUCT`\n* `GIFT_WRAPPING`\n",
              "properties": {
                "item_type": {
                  "type": "string",
                  "enum": [
                    "PRODUCT",
                    "GIFT_WRAPPING"
                  ],
                  "description": "Type of refund."
                },
                "item_id": {
                  "type": "integer",
                  "example": 1,
                  "description": "Order Product ID. "
                },
                "quantity": {
                  "type": "integer",
                  "example": 3
                },
                "reason": {
                  "type": "string",
                  "description": "Reason for refund",
                  "minLength": 0,
                  "maxLength": 1000
                }
              }
            },
            {
              "type": "object",
              "title": "Tax Exempt Item",
              "description": "Tax Exempt Item",
              "properties": {
                "item_type": {
                  "type": "string",
                  "description": "Type of refund.",
                  "example": "ORDER",
                  "enum": [
                    "ORDER"
                  ]
                },
                "amount": {
                  "type": "number",
                  "format": "float",
                  "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                  "example": 1.99,
                  "title": "Amount"
                },
                "reason": {
                  "type": "string",
                  "description": "Reason for the refund.",
                  "minLength": 0,
                  "maxLength": 1000
                },
                "item_id": {
                  "type": "integer",
                  "description": "Order Product ID."
                }
              }
            }
          ]
        },
        "title": "ItemsRefund"
      },
      "PaymentRequest": {
        "type": "object",
        "properties": {
          "provider_id": {
            "type": "string",
            "description": "Reference to payment provider",
            "example": "checkout_paypalexpress"
          },
          "amount": {
            "type": "number",
            "description": "Amount refunded via this provider",
            "example": 9.99
          },
          "offline": {
            "type": "boolean",
            "description": "Whether the payment was marked as offline or performed through an online payment service.",
            "example": true
          }
        },
        "example": "{\n    \"provider_id\": \"checkout_paypalexpress\",\n    \"amount\": 9.99,\n    \"offline\": true\n}",
        "title": "Payment Request"
      },
      "RefundMethod": {
        "type": "array",
        "minItems": 1,
        "items": {
          "type": "object",
          "example": {
            "provider_id": "checkout_paypalexpress",
            "provider_description": "Paypal Express",
            "amount": 9.99,
            "offline": true,
            "offline_provider": true,
            "offline_reason": "Multiple online refunds are not available"
          },
          "title": "Payment Option",
          "properties": {
            "provider_id": {
              "type": "string",
              "description": "Name of the payment method",
              "example": "checkout_paypalexpress"
            },
            "provider_description": {
              "type": "string",
              "description": "Description for payment provider",
              "example": "Paypal Express"
            },
            "amount": {
              "type": "number",
              "description": "amount to be refunded via this payment provider",
              "example": 9.99
            },
            "offline": {
              "type": "boolean",
              "description": "Indicates the payment must be done offline due to constraints of the payment provider, such as partial refunds not being supported, or it being offline only such as cash on delivery of bank deposit.",
              "example": true
            },
            "offline_provider": {
              "type": "boolean",
              "description": "Indicates if the payment provider is a strictly offline provider, such as cash on delivery or bank deposit.",
              "example": true
            },
            "offline_reason": {
              "type": "string",
              "description": "Reason the payment option is offline only, if applicable.",
              "example": "Multiple online refunds are not available"
            }
          }
        },
        "title": "Refund Method"
      },
      "QuantityBoundItem": {
        "type": "object",
        "title": "Quantity Bound Item",
        "description": "Quantity Bound Item\n\nType of refund item that capture refunding of items in the order that are of type quantity.\n* `PRODUCT`\n* `GIFT_WRAPPING`\n",
        "properties": {
          "item_type": {
            "type": "string",
            "enum": [
              "PRODUCT",
              "GIFT_WRAPPING"
            ],
            "description": "Type of refund."
          },
          "item_id": {
            "type": "integer",
            "example": 1,
            "description": "Order Product ID. "
          },
          "quantity": {
            "type": "integer",
            "example": 3
          },
          "reason": {
            "type": "string",
            "description": "Reason for refund",
            "minLength": 0,
            "maxLength": 1000
          }
        }
      },
      "TaxExemptItem": {
        "type": "object",
        "title": "Tax Exempt Item",
        "description": "Tax Exempt Item",
        "properties": {
          "item_type": {
            "type": "string",
            "description": "Type of refund.",
            "example": "ORDER",
            "enum": [
              "ORDER"
            ]
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
            "example": 1.99,
            "title": "Amount"
          },
          "reason": {
            "type": "string",
            "description": "Reason for the refund.",
            "minLength": 0,
            "maxLength": 1000
          },
          "item_id": {
            "type": "integer",
            "description": "Order Product ID."
          }
        }
      },
      "AmountBoundItem": {
        "type": "object",
        "title": "Amount Bound Item",
        "description": "Amount Bound Item\n\nType of refund item that capture refunding of items in the order that are of type amount.\n* `SHIPPING`\n* `HANDLING`\n",
        "properties": {
          "item_type": {
            "type": "string",
            "enum": [
              "SHIPPING",
              "HANDLING"
            ],
            "example": "SHIPPING",
            "description": "Type of refund."
          },
          "item_id": {
            "type": "integer",
            "example": 1,
            "description": "Order address ID."
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
            "example": 1.99,
            "title": "Amount"
          },
          "reason": {
            "type": "string",
            "minLength": 0,
            "maxLength": 1000
          }
        }
      },
      "Refund": {
        "type": "object",
        "title": "Refund",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Refund resource ID",
            "readOnly": true
          },
          "order_id": {
            "type": "integer",
            "description": "Reference to order id"
          },
          "user_id": {
            "type": "integer",
            "description": "Reference to the user's id who create this refund. This is automatically populated by BigCommerce.",
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this refund was created",
            "readOnly": true
          },
          "reason": {
            "type": "string",
            "description": "Reason for refund"
          },
          "total_amount": {
            "type": "number",
            "format": "float",
            "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
            "example": 1.99,
            "title": "Amount"
          },
          "total_tax": {
            "type": "number",
            "description": "Total tax amount refunded back to shopper. Note: order_level_amount does not affect tax liability. This can be negative amount indicating we have collected tax by virtue of refunding less to the customer"
          },
          "items": {
            "type": "array",
            "description": "Array of items refunded",
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "item_type": {
                  "type": "string",
                  "description": "Type of item that was refunded",
                  "enum": [
                    "PRODUCT",
                    "GIFT_WRAPPING",
                    "SHIPPING",
                    "HANDLING",
                    "ORDER"
                  ]
                },
                "item_id": {
                  "type": "integer",
                  "description": "Reference to the item"
                },
                "reason": {
                  "type": "string",
                  "description": "Reason for refunding an item"
                },
                "quantity": {
                  "type": "integer",
                  "description": "Quantity of item refunded. Note: this will only be populated for item_type PRODUCT"
                },
                "requested_amount": {
                  "type": "number",
                  "format": "float",
                  "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                  "example": 1.99,
                  "title": "Amount"
                }
              },
              "title": "Refund Item"
            }
          },
          "payments": {
            "type": "array",
            "description": "An array of refund payments made to payment providers",
            "minItems": 1,
            "items": {
              "type": "object",
              "title": "Refund Payment",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Reference to refund payment id",
                  "readOnly": true
                },
                "provider_id": {
                  "type": "string",
                  "description": "Reference to payment provider",
                  "example": "storecredit"
                },
                "amount": {
                  "type": "number",
                  "format": "float",
                  "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                  "example": 1.99,
                  "title": "Amount"
                },
                "offline": {
                  "type": "boolean",
                  "description": "Indicate whether payment was offline"
                },
                "is_declined": {
                  "type": "boolean",
                  "description": "Indicate if this payment has been declined by payment provider"
                },
                "declined_message": {
                  "type": "string",
                  "description": "Message indicate why payment was declined"
                }
              }
            }
          }
        }
      },
      "RefundItem": {
        "type": "object",
        "properties": {
          "item_type": {
            "type": "string",
            "description": "Type of item that was refunded",
            "enum": [
              "PRODUCT",
              "GIFT_WRAPPING",
              "SHIPPING",
              "HANDLING",
              "ORDER"
            ]
          },
          "item_id": {
            "type": "integer",
            "description": "Reference to the item"
          },
          "reason": {
            "type": "string",
            "description": "Reason for refunding an item"
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of item refunded. Note: this will only be populated for item_type PRODUCT"
          },
          "requested_amount": {
            "type": "number",
            "format": "float",
            "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
            "example": 1.99,
            "title": "Amount"
          }
        },
        "title": "Refund Item"
      },
      "RefundPayment": {
        "type": "object",
        "title": "Refund Payment",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Reference to refund payment id",
            "readOnly": true
          },
          "provider_id": {
            "type": "string",
            "description": "Reference to payment provider",
            "example": "storecredit"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
            "example": 1.99,
            "title": "Amount"
          },
          "offline": {
            "type": "boolean",
            "description": "Indicate whether payment was offline"
          },
          "is_declined": {
            "type": "boolean",
            "description": "Indicate if this payment has been declined by payment provider"
          },
          "declined_message": {
            "type": "string",
            "description": "Message indicate why payment was declined"
          }
        }
      },
      "PaymentOption": {
        "type": "object",
        "example": {
          "provider_id": "checkout_paypalexpress",
          "provider_description": "Paypal Express",
          "amount": 9.99,
          "offline": true,
          "offline_provider": true,
          "offline_reason": "Multiple online refunds are not available"
        },
        "title": "Payment Option",
        "properties": {
          "provider_id": {
            "type": "string",
            "description": "Name of the payment method",
            "example": "checkout_paypalexpress"
          },
          "provider_description": {
            "type": "string",
            "description": "Description for payment provider",
            "example": "Paypal Express"
          },
          "amount": {
            "type": "number",
            "description": "amount to be refunded via this payment provider",
            "example": 9.99
          },
          "offline": {
            "type": "boolean",
            "description": "Indicates the payment must be done offline due to constraints of the payment provider, such as partial refunds not being supported, or it being offline only such as cash on delivery of bank deposit.",
            "example": true
          },
          "offline_provider": {
            "type": "boolean",
            "description": "Indicates if the payment provider is a strictly offline provider, such as cash on delivery or bank deposit.",
            "example": true
          },
          "offline_reason": {
            "type": "string",
            "description": "Reason the payment option is offline only, if applicable.",
            "example": "Multiple online refunds are not available"
          }
        }
      },
      "Amount": {
        "type": "number",
        "format": "float",
        "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
        "example": 1.99,
        "title": "Amount"
      },
      "MetaRefund": {
        "type": "object",
        "title": "MetaRefund",
        "properties": {
          "failure": {
            "type": "integer"
          },
          "success": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        },
        "description": "Describes refund failures, success and totals."
      },
      "MetaFieldCollectionResponse": {
        "type": "object",
        "description": "Response payload for the BigCommerce API.\n",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Allows app partners to write custom data to various resources in the API.\n",
              "allOf": [
                {
                  "type": "object",
                  "description": "Common Metafield properties.\n",
                  "properties": {
                    "permission_set": {
                      "type": "string",
                      "description": "Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Can additionally grant storefront visibility to the field using (`read_and_sf_access`) or (`write_and_sf_access`).\n",
                      "enum": [
                        "app_only",
                        "read",
                        "write",
                        "read_and_sf_access",
                        "write_and_sf_access"
                      ],
                      "x-required": [
                        "post"
                      ]
                    },
                    "namespace": {
                      "type": "string",
                      "description": "Namespace for the metafield, for organizational purposes.\n",
                      "x-required": [
                        "post"
                      ],
                      "minLength": 1,
                      "maxLength": 64
                    },
                    "key": {
                      "type": "string",
                      "description": "The name of the field, for example: `location_id`, `color`.\n",
                      "x-required": [
                        "post"
                      ],
                      "minLength": 1,
                      "maxLength": 64
                    },
                    "value": {
                      "type": "string",
                      "description": "The value of the field, for example: `1`, `blue`.\n",
                      "x-required": [
                        "post"
                      ],
                      "minLength": 1,
                      "maxLength": 65535
                    },
                    "description": {
                      "type": "string",
                      "description": "Description for the metafields.\n",
                      "minLength": 0,
                      "maxLength": 255
                    },
                    "resource_type": {
                      "type": "string",
                      "description": "The type of resource with which the metafield is associated.\n",
                      "enum": [
                        "category",
                        "brand",
                        "product",
                        "variant"
                      ],
                      "x-required": [
                        "post"
                      ]
                    },
                    "resource_id": {
                      "type": "integer",
                      "description": "The unique identifier for the resource with which the metafield is associated.\n",
                      "x-required": [
                        "post"
                      ],
                      "minimum": 0,
                      "maximum": 10000000000
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "The unique identifier for the metafields.\n"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Date and time of the metafield's creation.\n"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Date and time when the metafield was last updated.\n"
                    }
                  }
                }
              ]
            }
          },
          "meta": {
            "type": "object",
            "description": "Data about the response, including pagination and collection totals.",
            "properties": {
              "pagination": {
                "type": "object",
                "description": "Data about the response, including pagination and collection totals.",
                "title": "Pagination",
                "properties": {
                  "total": {
                    "type": "integer",
                    "description": "Total number of items in the result set.\n",
                    "example": 36
                  },
                  "count": {
                    "type": "integer",
                    "description": "Total number of items in the collection response.\n",
                    "example": 36
                  },
                  "per_page": {
                    "type": "integer",
                    "description": "The amount of items returned in the collection per page, controlled by the limit parameter.\n",
                    "example": 50
                  },
                  "current_page": {
                    "type": "integer",
                    "description": "The page you are currently on within the collection.\n",
                    "example": 1
                  },
                  "total_pages": {
                    "type": "integer",
                    "description": "The total number of pages in the collection.\n",
                    "example": 1
                  },
                  "links": {
                    "type": "object",
                    "description": "Pagination links for the previous and next parts of the whole collection.\n",
                    "properties": {
                      "previous": {
                        "type": "string",
                        "description": "Link to the previous page returned in the response.\n"
                      },
                      "current": {
                        "type": "string",
                        "description": "Link to the current page returned in the response.\n",
                        "example": "?page=1&limit=50"
                      },
                      "next": {
                        "type": "string",
                        "description": "Link to the next page returned in the response.\n"
                      }
                    }
                  }
                }
              }
            },
            "title": "Collection Meta"
          }
        }
      },
      "MetafieldResponse": {
        "description": "Response payload for the BigCommerce API.\n",
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Allows app partners to write custom data to various resources in the API.\n",
            "allOf": [
              {
                "type": "object",
                "description": "Common Metafield properties.\n",
                "properties": {
                  "permission_set": {
                    "type": "string",
                    "description": "Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Can additionally grant storefront visibility to the field using (`read_and_sf_access`) or (`write_and_sf_access`).\n",
                    "enum": [
                      "app_only",
                      "read",
                      "write",
                      "read_and_sf_access",
                      "write_and_sf_access"
                    ],
                    "x-required": [
                      "post"
                    ]
                  },
                  "namespace": {
                    "type": "string",
                    "description": "Namespace for the metafield, for organizational purposes.\n",
                    "x-required": [
                      "post"
                    ],
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "key": {
                    "type": "string",
                    "description": "The name of the field, for example: `location_id`, `color`.\n",
                    "x-required": [
                      "post"
                    ],
                    "minLength": 1,
                    "maxLength": 64
                  },
                  "value": {
                    "type": "string",
                    "description": "The value of the field, for example: `1`, `blue`.\n",
                    "x-required": [
                      "post"
                    ],
                    "minLength": 1,
                    "maxLength": 65535
                  },
                  "description": {
                    "type": "string",
                    "description": "Description for the metafields.\n",
                    "minLength": 0,
                    "maxLength": 255
                  },
                  "resource_type": {
                    "type": "string",
                    "description": "The type of resource with which the metafield is associated.\n",
                    "enum": [
                      "category",
                      "brand",
                      "product",
                      "variant"
                    ],
                    "x-required": [
                      "post"
                    ]
                  },
                  "resource_id": {
                    "type": "integer",
                    "description": "The unique identifier for the resource with which the metafield is associated.\n",
                    "x-required": [
                      "post"
                    ],
                    "minimum": 0,
                    "maximum": 10000000000
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The unique identifier for the metafields.\n"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the metafield's creation.\n"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time when the metafield was last updated.\n"
                  }
                }
              }
            ]
          },
          "meta": {
            "type": "object",
            "title": "Meta",
            "properties": {
              "meta": {
                "type": "object",
                "description": "Data about the response, including pagination and collection totals.",
                "title": "Pagination",
                "properties": {
                  "total": {
                    "type": "integer",
                    "description": "Total number of items in the result set.\n",
                    "example": 36
                  },
                  "count": {
                    "type": "integer",
                    "description": "Total number of items in the collection response.\n",
                    "example": 36
                  },
                  "per_page": {
                    "type": "integer",
                    "description": "The amount of items returned in the collection per page, controlled by the limit parameter.\n",
                    "example": 50
                  },
                  "current_page": {
                    "type": "integer",
                    "description": "The page you are currently on within the collection.\n",
                    "example": 1
                  },
                  "total_pages": {
                    "type": "integer",
                    "description": "The total number of pages in the collection.\n",
                    "example": 1
                  },
                  "links": {
                    "type": "object",
                    "description": "Pagination links for the previous and next parts of the whole collection.\n",
                    "properties": {
                      "previous": {
                        "type": "string",
                        "description": "Link to the previous page returned in the response.\n"
                      },
                      "current": {
                        "type": "string",
                        "description": "Link to the current page returned in the response.\n",
                        "example": "?page=1&limit=50"
                      },
                      "next": {
                        "type": "string",
                        "description": "Link to the next page returned in the response.\n"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "MetafieldBase": {
        "type": "object",
        "description": "Common Metafield properties.\n",
        "properties": {
          "permission_set": {
            "type": "string",
            "description": "Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Can additionally grant storefront visibility to the field using (`read_and_sf_access`) or (`write_and_sf_access`).\n",
            "enum": [
              "app_only",
              "read",
              "write",
              "read_and_sf_access",
              "write_and_sf_access"
            ],
            "x-required": [
              "post"
            ]
          },
          "namespace": {
            "type": "string",
            "description": "Namespace for the metafield, for organizational purposes.\n",
            "x-required": [
              "post"
            ],
            "minLength": 1,
            "maxLength": 64
          },
          "key": {
            "type": "string",
            "description": "The name of the field, for example: `location_id`, `color`.\n",
            "x-required": [
              "post"
            ],
            "minLength": 1,
            "maxLength": 64
          },
          "value": {
            "type": "string",
            "description": "The value of the field, for example: `1`, `blue`.\n",
            "x-required": [
              "post"
            ],
            "minLength": 1,
            "maxLength": 65535
          },
          "description": {
            "type": "string",
            "description": "Description for the metafields.\n",
            "minLength": 0,
            "maxLength": 255
          },
          "resource_type": {
            "type": "string",
            "description": "The type of resource with which the metafield is associated.\n",
            "enum": [
              "category",
              "brand",
              "product",
              "variant"
            ],
            "x-required": [
              "post"
            ]
          },
          "resource_id": {
            "type": "integer",
            "description": "The unique identifier for the resource with which the metafield is associated.\n",
            "x-required": [
              "post"
            ],
            "minimum": 0,
            "maximum": 10000000000
          }
        }
      },
      "Metafield": {
        "type": "object",
        "description": "Allows app partners to write custom data to various resources in the API.\n",
        "allOf": [
          {
            "type": "object",
            "description": "Common Metafield properties.\n",
            "properties": {
              "permission_set": {
                "type": "string",
                "description": "Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Can additionally grant storefront visibility to the field using (`read_and_sf_access`) or (`write_and_sf_access`).\n",
                "enum": [
                  "app_only",
                  "read",
                  "write",
                  "read_and_sf_access",
                  "write_and_sf_access"
                ],
                "x-required": [
                  "post"
                ]
              },
              "namespace": {
                "type": "string",
                "description": "Namespace for the metafield, for organizational purposes.\n",
                "x-required": [
                  "post"
                ],
                "minLength": 1,
                "maxLength": 64
              },
              "key": {
                "type": "string",
                "description": "The name of the field, for example: `location_id`, `color`.\n",
                "x-required": [
                  "post"
                ],
                "minLength": 1,
                "maxLength": 64
              },
              "value": {
                "type": "string",
                "description": "The value of the field, for example: `1`, `blue`.\n",
                "x-required": [
                  "post"
                ],
                "minLength": 1,
                "maxLength": 65535
              },
              "description": {
                "type": "string",
                "description": "Description for the metafields.\n",
                "minLength": 0,
                "maxLength": 255
              },
              "resource_type": {
                "type": "string",
                "description": "The type of resource with which the metafield is associated.\n",
                "enum": [
                  "category",
                  "brand",
                  "product",
                  "variant"
                ],
                "x-required": [
                  "post"
                ]
              },
              "resource_id": {
                "type": "integer",
                "description": "The unique identifier for the resource with which the metafield is associated.\n",
                "x-required": [
                  "post"
                ],
                "minimum": 0,
                "maximum": 10000000000
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "The unique identifier for the metafields.\n"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time of the metafield's creation.\n"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time",
                "description": "Date and time when the metafield was last updated.\n"
              }
            }
          }
        ]
      },
      "MetafieldPost": {
        "type": "object",
        "description": "The model for a POST to create metafield.\n",
        "allOf": [
          {
            "type": "object",
            "description": "Common Metafield properties.\n",
            "properties": {
              "permission_set": {
                "type": "string",
                "description": "Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Can additionally grant storefront visibility to the field using (`read_and_sf_access`) or (`write_and_sf_access`).\n",
                "enum": [
                  "app_only",
                  "read",
                  "write",
                  "read_and_sf_access",
                  "write_and_sf_access"
                ],
                "x-required": [
                  "post"
                ]
              },
              "namespace": {
                "type": "string",
                "description": "Namespace for the metafield, for organizational purposes.\n",
                "x-required": [
                  "post"
                ],
                "minLength": 1,
                "maxLength": 64
              },
              "key": {
                "type": "string",
                "description": "The name of the field, for example: `location_id`, `color`.\n",
                "x-required": [
                  "post"
                ],
                "minLength": 1,
                "maxLength": 64
              },
              "value": {
                "type": "string",
                "description": "The value of the field, for example: `1`, `blue`.\n",
                "x-required": [
                  "post"
                ],
                "minLength": 1,
                "maxLength": 65535
              },
              "description": {
                "type": "string",
                "description": "Description for the metafields.\n",
                "minLength": 0,
                "maxLength": 255
              },
              "resource_type": {
                "type": "string",
                "description": "The type of resource with which the metafield is associated.\n",
                "enum": [
                  "category",
                  "brand",
                  "product",
                  "variant"
                ],
                "x-required": [
                  "post"
                ]
              },
              "resource_id": {
                "type": "integer",
                "description": "The unique identifier for the resource with which the metafield is associated.\n",
                "x-required": [
                  "post"
                ],
                "minimum": 0,
                "maximum": 10000000000
              }
            }
          }
        ]
      },
      "MetafieldPut": {
        "type": "object",
        "description": "The model for a PUT to update metafield.\n",
        "allOf": [
          {
            "type": "object",
            "description": "Common Metafield properties.\n",
            "properties": {
              "permission_set": {
                "type": "string",
                "description": "Determines whether the field is completely private to the app that owns the field (`app_only`), or visible to other API consumers (`read`), or completely open for reading and writing to other apps (`write`). Can additionally grant storefront visibility to the field using (`read_and_sf_access`) or (`write_and_sf_access`).\n",
                "enum": [
                  "app_only",
                  "read",
                  "write",
                  "read_and_sf_access",
                  "write_and_sf_access"
                ],
                "x-required": [
                  "post"
                ]
              },
              "namespace": {
                "type": "string",
                "description": "Namespace for the metafield, for organizational purposes.\n",
                "x-required": [
                  "post"
                ],
                "minLength": 1,
                "maxLength": 64
              },
              "key": {
                "type": "string",
                "description": "The name of the field, for example: `location_id`, `color`.\n",
                "x-required": [
                  "post"
                ],
                "minLength": 1,
                "maxLength": 64
              },
              "value": {
                "type": "string",
                "description": "The value of the field, for example: `1`, `blue`.\n",
                "x-required": [
                  "post"
                ],
                "minLength": 1,
                "maxLength": 65535
              },
              "description": {
                "type": "string",
                "description": "Description for the metafields.\n",
                "minLength": 0,
                "maxLength": 255
              },
              "resource_type": {
                "type": "string",
                "description": "The type of resource with which the metafield is associated.\n",
                "enum": [
                  "category",
                  "brand",
                  "product",
                  "variant"
                ],
                "x-required": [
                  "post"
                ]
              },
              "resource_id": {
                "type": "integer",
                "description": "The unique identifier for the resource with which the metafield is associated.\n",
                "x-required": [
                  "post"
                ],
                "minimum": 0,
                "maximum": 10000000000
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "The unique identifier for the metafields.\n",
                "x-required": [
                  "put"
                ],
                "minimum": 0,
                "maximum": 10000000000
              }
            }
          }
        ]
      }
    },
    "responses": {
      "Return_Resp": {
        "description": "",
        "schema": {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "description": "A view of a return",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "A view of a return item",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The unique identifier of this return item"
                      },
                      "reference_id": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The reference type",
                            "enum": [
                              "ORDER_PRODUCT"
                            ]
                          },
                          "value": {
                            "type": "string",
                            "description": "The value identifying the returned item"
                          }
                        },
                        "required": [
                          "type",
                          "value"
                        ]
                      },
                      "quantity": {
                        "type": "integer",
                        "description": "The quantity of items for which a return was requested"
                      },
                      "total": {
                        "type": "string",
                        "format": "decimal",
                        "description": "The total price of the line item"
                      },
                      "preferred_outcome": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Unique identifier of the preferred outcome"
                          },
                          "label": {
                            "type": "string",
                            "description": "A displayable label for the preferred outcome"
                          }
                        }
                      },
                      "reason": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Unique identifier of the reason"
                          },
                          "label": {
                            "type": "string",
                            "description": "A displayable label for the reason"
                          }
                        }
                      },
                      "received_state": {
                        "type": "object",
                        "properties": {
                          "received_quantity": {
                            "type": "integer",
                            "description": "The quantity of items marked as received by the merchant"
                          },
                          "pending_quantity": {
                            "type": "integer",
                            "description": "The quantity of items pending receipt by the merchant"
                          }
                        }
                      },
                      "review_state": {
                        "type": "object",
                        "properties": {
                          "approved_quantity": {
                            "type": "integer",
                            "description": "The quantity of items approved for return by the merchant"
                          },
                          "pending_quantity": {
                            "type": "integer",
                            "description": "The quantity of items pending receipt by the merchant"
                          },
                          "rejected_quantity": {
                            "type": "integer",
                            "description": "The quantity of items rejected by the merchant"
                          }
                        }
                      }
                    }
                  }
                },
                "total": {
                  "type": "string",
                  "format": "decimal",
                  "description": "The total price of the items being returned"
                },
                "currency": {
                  "type": "string",
                  "format": "iso-4217",
                  "description": "The transactional currency of the return and the associated order"
                },
                "customer": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "email": {
                      "type": "string",
                      "format": "email"
                    }
                  }
                },
                "comment": {
                  "type": "string",
                  "description": "A comment provided to the merchant for review"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "CLOSED",
                    "OPEN",
                    "REMOVED"
                  ],
                  "description": "The status of the return.",
                  "title": "Status_Full"
                },
                "date_modified": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "meta": {
              "type": "object",
              "properties": {
                "pagination": {
                  "type": "object",
                  "description": "Data about the response, including pagination and collection totals.",
                  "title": "Pagination",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total number of items in the result set.\n",
                      "example": 36
                    },
                    "count": {
                      "type": "integer",
                      "description": "Total number of items in the collection response.\n",
                      "example": 36
                    },
                    "per_page": {
                      "type": "integer",
                      "description": "The amount of items returned in the collection per page, controlled by the limit parameter.\n",
                      "example": 50
                    },
                    "current_page": {
                      "type": "integer",
                      "description": "The page you are currently on within the collection.\n",
                      "example": 1
                    },
                    "total_pages": {
                      "type": "integer",
                      "description": "The total number of pages in the collection.\n",
                      "example": 1
                    },
                    "links": {
                      "type": "object",
                      "description": "Pagination links for the previous and next parts of the whole collection.\n",
                      "properties": {
                        "previous": {
                          "type": "string",
                          "description": "Link to the previous page returned in the response.\n"
                        },
                        "current": {
                          "type": "string",
                          "description": "Link to the current page returned in the response.\n",
                          "example": "?page=1&limit=50"
                        },
                        "next": {
                          "type": "string",
                          "description": "Link to the next page returned in the response.\n"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "examples": {}
      },
      "ReturnStatus_Resp": {
        "description": "",
        "schema": {
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The ID of the return for which the status was updated"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "CLOSED",
                      "OPEN",
                      "REMOVED"
                    ],
                    "description": "The status of the return.",
                    "title": "Status_Full"
                  }
                }
              }
            },
            "errors": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "integer",
                    "description": "Status code of the problem"
                  },
                  "title": {
                    "type": "string",
                    "description": "A short description of the problem"
                  },
                  "type": {
                    "type": "string",
                    "format": "url",
                    "description": "A resource describing the problem"
                  }
                }
              }
            },
            "meta": {
              "type": "object",
              "properties": {
                "total": {
                  "type": "integer",
                  "description": "The total number of operations in the batch"
                },
                "success": {
                  "type": "integer",
                  "description": "The number of failed operations in the batch"
                },
                "failed": {
                  "type": "integer",
                  "description": "The number of failed operations in the batch"
                }
              }
            }
          }
        }
      },
      "OrderReturnableItems_Resp": {
        "description": "",
        "schema": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "reference_id": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The reference type",
                        "enum": [
                          "ORDER_PRODUCT"
                        ]
                      },
                      "value": {
                        "type": "string",
                        "description": "The value identifying the returned item"
                      }
                    },
                    "required": [
                      "type",
                      "value"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the order product"
                  },
                  "returnable_quantity": {
                    "type": "integer",
                    "description": "The maximum quantity of this item that can presently be requested for return"
                  },
                  "total": {
                    "type": "string",
                    "format": "decimal",
                    "description": "The total price of this line item"
                  },
                  "options": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "display_name": {
                          "type": "string",
                          "description": "A displayable name for the option"
                        },
                        "display_value": {
                          "type": "string",
                          "description": "A displayable value for the option"
                        }
                      },
                      "description": "An item available for return"
                    },
                    "description": "A collection of options configured for the order product"
                  }
                }
              }
            }
          }
        }
      },
      "CreateReturn_Resp": {
        "description": "",
        "schema": {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "description": "A view of a return",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "A view of a return item",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The unique identifier of this return item"
                      },
                      "reference_id": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The reference type",
                            "enum": [
                              "ORDER_PRODUCT"
                            ]
                          },
                          "value": {
                            "type": "string",
                            "description": "The value identifying the returned item"
                          }
                        },
                        "required": [
                          "type",
                          "value"
                        ]
                      },
                      "quantity": {
                        "type": "integer",
                        "description": "The quantity of items for which a return was requested"
                      },
                      "total": {
                        "type": "string",
                        "format": "decimal",
                        "description": "The total price of the line item"
                      },
                      "preferred_outcome": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Unique identifier of the preferred outcome"
                          },
                          "label": {
                            "type": "string",
                            "description": "A displayable label for the preferred outcome"
                          }
                        }
                      },
                      "reason": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Unique identifier of the reason"
                          },
                          "label": {
                            "type": "string",
                            "description": "A displayable label for the reason"
                          }
                        }
                      },
                      "received_state": {
                        "type": "object",
                        "properties": {
                          "received_quantity": {
                            "type": "integer",
                            "description": "The quantity of items marked as received by the merchant"
                          },
                          "pending_quantity": {
                            "type": "integer",
                            "description": "The quantity of items pending receipt by the merchant"
                          }
                        }
                      },
                      "review_state": {
                        "type": "object",
                        "properties": {
                          "approved_quantity": {
                            "type": "integer",
                            "description": "The quantity of items approved for return by the merchant"
                          },
                          "pending_quantity": {
                            "type": "integer",
                            "description": "The quantity of items pending receipt by the merchant"
                          },
                          "rejected_quantity": {
                            "type": "integer",
                            "description": "The quantity of items rejected by the merchant"
                          }
                        }
                      }
                    }
                  }
                },
                "total": {
                  "type": "string",
                  "format": "decimal",
                  "description": "The total price of the items being returned"
                },
                "currency": {
                  "type": "string",
                  "format": "iso-4217",
                  "description": "The transactional currency of the return and the associated order"
                },
                "customer": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "email": {
                      "type": "string",
                      "format": "email"
                    }
                  }
                },
                "comment": {
                  "type": "string",
                  "description": "A comment provided to the merchant for review"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "CLOSED",
                    "OPEN",
                    "REMOVED"
                  ],
                  "description": "The status of the return.",
                  "title": "Status_Full"
                },
                "date_modified": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        }
      },
      "ReceivedItems_Resp": {
        "description": "",
        "schema": {
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "item_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The ID of the item for which received item status was updated"
                  },
                  "received_quantity": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The quantity of items marked as received"
                  },
                  "pending_quantity": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The quantity of items marked as pending"
                  }
                }
              },
              "title": "ReceivedItems_Base"
            },
            "errors": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "integer",
                    "description": "Status code of the problem"
                  },
                  "title": {
                    "type": "string",
                    "description": "A short description of the problem"
                  },
                  "type": {
                    "type": "string",
                    "format": "url",
                    "description": "A resource describing the problem"
                  }
                }
              }
            },
            "meta": {
              "type": "object",
              "properties": {
                "total": {
                  "type": "integer",
                  "description": "The total number of operations in the batch"
                },
                "success": {
                  "type": "integer",
                  "description": "The number of failed operations in the batch"
                },
                "failed": {
                  "type": "integer",
                  "description": "The number of failed operations in the batch"
                }
              }
            }
          }
        }
      },
      "ReviewedItems_Resp": {
        "description": "",
        "schema": {
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "item_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The ID of the item for which reviewed status was updated"
                  },
                  "authorized_quantity": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The quantity of items marked as authorized"
                  },
                  "rejected_quantity": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The quantity of items marked as rejected"
                  },
                  "pending_quantity": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The quantity of items marked as pending"
                  }
                }
              },
              "title": "ReviewedItems_Base"
            },
            "errors": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "integer",
                    "description": "Status code of the problem"
                  },
                  "title": {
                    "type": "string",
                    "description": "A short description of the problem"
                  },
                  "type": {
                    "type": "string",
                    "format": "url",
                    "description": "A resource describing the problem"
                  }
                }
              }
            },
            "meta": {
              "type": "object",
              "properties": {
                "total": {
                  "type": "integer",
                  "description": "The total number of operations in the batch"
                },
                "success": {
                  "type": "integer",
                  "description": "The number of failed operations in the batch"
                },
                "failed": {
                  "type": "integer",
                  "description": "The number of failed operations in the batch"
                }
              }
            }
          }
        }
      },
      "StoreReturnSettings_Resp": {
        "description": "",
        "schema": {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "properties": {
                "reasons": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "label": {
                        "type": "string",
                        "description": "A description of the reason"
                      },
                      "is_archived": {
                        "type": "boolean",
                        "description": "Indicates whether or not the reason has been archived"
                      }
                    }
                  }
                },
                "preferred_outcomes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "label": {
                        "type": "string",
                        "description": "A description of the outcome"
                      },
                      "is_archived": {
                        "type": "boolean",
                        "description": "Indicates whether or not the outcome has been archived"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "502_GatewayError": {
        "description": "If something happens during the request that causes it to fail, a 502 response will be returned. A new request should be made; however, it could fail.",
        "schema": {
          "type": "object",
          "title": "error_Base",
          "properties": {
            "status": {
              "description": "The HTTP status code.\n",
              "type": "integer"
            },
            "title": {
              "description": "The error title describing the particular error.\n",
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          },
          "description": "Error payload for the BigCommerce API."
        },
        "examples": {
          "application/json": {
            "status": 502,
            "title": "A login URL could not be generated. Please try another request.",
            "type": "https://developer.bigcommerce.com/api#api-status-codes"
          }
        }
      },
      "504_GatewayTimeout": {
        "description": "If this occurs, you should retry the request. Typically retrying the request several times will result in a successful request; However, if you are unable to successfully make a request, please check the BigCommerce system status [here](https://status.bigcommerce.com/). A service is likely down and the request will need to be made again when it is back up (in several hours usually)",
        "schema": {
          "type": "object",
          "properties": {
            "errors": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "title": "DetailedErrors"
            }
          },
          "title": "errorDetailed_Full"
        },
        "examples": {
          "application/json": {
            "status": 504,
            "title": "Gateway Timeout",
            "type": "https://developer.bigcommerce.com/api#api-status-codes",
            "errors": {}
          }
        }
      },
      "403_Unauthorized": {
        "description": "",
        "schema": {
          "type": "object",
          "title": "error_Base",
          "properties": {
            "status": {
              "description": "The HTTP status code.\n",
              "type": "integer"
            },
            "title": {
              "description": "The error title describing the particular error.\n",
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          },
          "description": "Error payload for the BigCommerce API."
        },
        "examples": {
          "application/json": {
            "status": 403,
            "title": "Unauthorized Access. You do not have permission to make this request.",
            "type": "https://developer.bigcommerce.com/api#api-status-codes"
          }
        }
      },
      "400_BadRequest": {
        "description": "Malformed request syntax. Typically need to fix the JSON\nBody to resend successfully.",
        "schema": {
          "type": "object",
          "title": "error_Base",
          "properties": {
            "status": {
              "description": "The HTTP status code.\n",
              "type": "integer"
            },
            "title": {
              "description": "The error title describing the particular error.\n",
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          },
          "description": "Error payload for the BigCommerce API."
        },
        "examples": {
          "application/json": {
            "status": 400,
            "title": "Input is invalid.",
            "type": "https://developer.bigcommerce.com/api#api-status-codes"
          }
        }
      },
      "404_NotFound": {
        "description": "The resource was not found.",
        "schema": {
          "type": "object",
          "title": "error_Base",
          "properties": {
            "status": {
              "description": "The HTTP status code.\n",
              "type": "integer"
            },
            "title": {
              "description": "The error title describing the particular error.\n",
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          },
          "description": "Error payload for the BigCommerce API."
        },
        "examples": {
          "application/json": {
            "status": 404,
            "title": "Account with {id} not found",
            "type": "https://developer.bigcommerce.com/api#api-status-codes"
          }
        }
      },
      "422_UnprocessableEntity": {
        "description": "This occurs when missing or unacceptable data is passed for one or more fields. Please correct the values for the fields listed in the errors object.",
        "schema": {
          "allOf": [
            {
              "type": "object",
              "title": "error_Base",
              "properties": {
                "status": {
                  "description": "The HTTP status code.\n",
                  "type": "integer"
                },
                "title": {
                  "description": "The error title describing the particular error.\n",
                  "type": "string"
                },
                "type": {
                  "type": "string"
                }
              },
              "description": "Error payload for the BigCommerce API."
            },
            {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "DetailedErrors"
                }
              }
            }
          ],
          "title": "ErrorResponse"
        },
        "examples": {
          "application/json": {
            "status": 422,
            "title": "JSON data is missing or invalid",
            "type": "https://developer.bigcommerce.com/api#api-status-codes",
            "errors": {
              "name": "error.expected.jsstring",
              "primary_contact.district": "error.expected.jsstring."
            }
          }
        }
      },
      "503_ServiceUnavailable": {
        "description": "If this occurs, you should retry the request. If you are unable to successfully make a request, please check the BigCommerce system status [here](https://status.bigcommerce.com/). A service is likely down and the request will need to be made again when it is back up (in several hours usually)",
        "schema": {
          "type": "object",
          "title": "error_Base",
          "properties": {
            "status": {
              "description": "The HTTP status code.\n",
              "type": "integer"
            },
            "title": {
              "description": "The error title describing the particular error.\n",
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          },
          "description": "Error payload for the BigCommerce API."
        },
        "examples": {
          "application/json": {
            "status": 503,
            "title": "Service Unavailable",
            "type": "https://developer.bigcommerce.com/api#api-status-codes"
          }
        }
      },
      "paymentActionsCapture_Resp": {
        "description": "",
        "schema": {
          "type": "object",
          "properties": {}
        }
      },
      "paymentActionsVoid_Resp": {
        "description": "",
        "schema": {
          "type": "object",
          "properties": {}
        }
      },
      "201_Acknowledged": {
        "description": "Request acknowledged.",
        "schema": {
          "type": "object",
          "properties": {}
        }
      },
      "RefundCollection_Resp": {
        "description": "",
        "schema": {
          "type": "object",
          "description": "Response payload for Refund resource",
          "properties": {
            "data": {
              "type": "array",
              "description": "Collection of Refunds",
              "items": {
                "type": "object",
                "title": "Refund",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "Refund resource ID",
                    "readOnly": true
                  },
                  "order_id": {
                    "type": "integer",
                    "description": "Reference to order id"
                  },
                  "user_id": {
                    "type": "integer",
                    "description": "Reference to the user's id who create this refund. This is automatically populated by BigCommerce.",
                    "readOnly": true
                  },
                  "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp of when this refund was created",
                    "readOnly": true
                  },
                  "reason": {
                    "type": "string",
                    "description": "Reason for refund"
                  },
                  "total_amount": {
                    "type": "number",
                    "format": "float",
                    "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                    "example": 1.99,
                    "title": "Amount"
                  },
                  "total_tax": {
                    "type": "number",
                    "description": "Total tax amount refunded back to shopper. Note: order_level_amount does not affect tax liability. This can be negative amount indicating we have collected tax by virtue of refunding less to the customer"
                  },
                  "items": {
                    "type": "array",
                    "description": "Array of items refunded",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "properties": {
                        "item_type": {
                          "type": "string",
                          "description": "Type of item that was refunded",
                          "enum": [
                            "PRODUCT",
                            "GIFT_WRAPPING",
                            "SHIPPING",
                            "HANDLING",
                            "ORDER"
                          ]
                        },
                        "item_id": {
                          "type": "integer",
                          "description": "Reference to the item"
                        },
                        "reason": {
                          "type": "string",
                          "description": "Reason for refunding an item"
                        },
                        "quantity": {
                          "type": "integer",
                          "description": "Quantity of item refunded. Note: this will only be populated for item_type PRODUCT"
                        },
                        "requested_amount": {
                          "type": "number",
                          "format": "float",
                          "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                          "example": 1.99,
                          "title": "Amount"
                        }
                      },
                      "title": "Refund Item"
                    }
                  },
                  "payments": {
                    "type": "array",
                    "description": "An array of refund payments made to payment providers",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "title": "Refund Payment",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Reference to refund payment id",
                          "readOnly": true
                        },
                        "provider_id": {
                          "type": "string",
                          "description": "Reference to payment provider",
                          "example": "storecredit"
                        },
                        "amount": {
                          "type": "number",
                          "format": "float",
                          "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                          "example": 1.99,
                          "title": "Amount"
                        },
                        "offline": {
                          "type": "boolean",
                          "description": "Indicate whether payment was offline"
                        },
                        "is_declined": {
                          "type": "boolean",
                          "description": "Indicate if this payment has been declined by payment provider"
                        },
                        "declined_message": {
                          "type": "string",
                          "description": "Message indicate why payment was declined"
                        }
                      }
                    }
                  }
                }
              }
            },
            "meta": {
              "type": "object",
              "description": "Meta data collection"
            }
          }
        }
      },
      "refundsBATCH_Resp": {
        "description": "",
        "schema": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Refund",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "Refund resource ID",
                    "readOnly": true
                  },
                  "order_id": {
                    "type": "integer",
                    "description": "Reference to order id"
                  },
                  "user_id": {
                    "type": "integer",
                    "description": "Reference to the user's id who create this refund. This is automatically populated by BigCommerce.",
                    "readOnly": true
                  },
                  "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp of when this refund was created",
                    "readOnly": true
                  },
                  "reason": {
                    "type": "string",
                    "description": "Reason for refund"
                  },
                  "total_amount": {
                    "type": "number",
                    "format": "float",
                    "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                    "example": 1.99,
                    "title": "Amount"
                  },
                  "total_tax": {
                    "type": "number",
                    "description": "Total tax amount refunded back to shopper. Note: order_level_amount does not affect tax liability. This can be negative amount indicating we have collected tax by virtue of refunding less to the customer"
                  },
                  "items": {
                    "type": "array",
                    "description": "Array of items refunded",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "properties": {
                        "item_type": {
                          "type": "string",
                          "description": "Type of item that was refunded",
                          "enum": [
                            "PRODUCT",
                            "GIFT_WRAPPING",
                            "SHIPPING",
                            "HANDLING",
                            "ORDER"
                          ]
                        },
                        "item_id": {
                          "type": "integer",
                          "description": "Reference to the item"
                        },
                        "reason": {
                          "type": "string",
                          "description": "Reason for refunding an item"
                        },
                        "quantity": {
                          "type": "integer",
                          "description": "Quantity of item refunded. Note: this will only be populated for item_type PRODUCT"
                        },
                        "requested_amount": {
                          "type": "number",
                          "format": "float",
                          "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                          "example": 1.99,
                          "title": "Amount"
                        }
                      },
                      "title": "Refund Item"
                    }
                  },
                  "payments": {
                    "type": "array",
                    "description": "An array of refund payments made to payment providers",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "title": "Refund Payment",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Reference to refund payment id",
                          "readOnly": true
                        },
                        "provider_id": {
                          "type": "string",
                          "description": "Reference to payment provider",
                          "example": "storecredit"
                        },
                        "amount": {
                          "type": "number",
                          "format": "float",
                          "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                          "example": 1.99,
                          "title": "Amount"
                        },
                        "offline": {
                          "type": "boolean",
                          "description": "Indicate whether payment was offline"
                        },
                        "is_declined": {
                          "type": "boolean",
                          "description": "Indicate if this payment has been declined by payment provider"
                        },
                        "declined_message": {
                          "type": "string",
                          "description": "Message indicate why payment was declined"
                        }
                      }
                    }
                  }
                }
              }
            },
            "errors": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "Failed quote response.",
                "properties": {
                  "order_id": {
                    "type": "integer"
                  },
                  "status": {
                    "type": "integer",
                    "description": "HTTP status code",
                    "example": 422
                  },
                  "error": {
                    "type": "string",
                    "description": "details why the request failed"
                  }
                },
                "title": "FailedQuoteError"
              }
            },
            "meta": {
              "type": "object",
              "title": "MetaRefund",
              "properties": {
                "failure": {
                  "type": "integer"
                },
                "success": {
                  "type": "integer"
                },
                "total": {
                  "type": "integer"
                }
              },
              "description": "Describes refund failures, success and totals."
            }
          }
        },
        "examples": {
          "application/json": {
            "data": [
              {
                "id": 1,
                "order_id": 1,
                "user_id": 1,
                "created": "",
                "reason": "",
                "total_amount": 0.05,
                "total_tax": 1,
                "items": [
                  {
                    "item_type": "PRODUCT",
                    "item_id": 1,
                    "reason": "",
                    "quantity": 1,
                    "requested_amount": 1.99
                  }
                ],
                "payments": [
                  {
                    "id": 1,
                    "provider_id": "storecredit",
                    "amount": 0.05,
                    "offline": true,
                    "is_declined": true,
                    "declined_message": ""
                  }
                ]
              },
              {
                "id": 2,
                "order_id": 100,
                "user_id": 1,
                "created": "",
                "reason": "",
                "total_amount": 0.05,
                "total_tax": 1,
                "items": [
                  {
                    "item_type": "SHIPPING",
                    "item_id": 1,
                    "reason": "",
                    "quantity": 1,
                    "requested_amount": 1.99
                  }
                ],
                "payments": [
                  {
                    "id": 1,
                    "provider_id": "storecredit",
                    "amount": 0.05,
                    "offline": true,
                    "is_declined": true,
                    "declined_message": ""
                  }
                ]
              }
            ],
            "errors": [],
            "meta": {
              "failure": 0,
              "success": 2,
              "total": 2
            }
          }
        }
      },
      "RefundQuote_Resp": {
        "description": "",
        "schema": {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "title": "RefundQuote_Full",
              "properties": {
                "order_id": {
                  "type": "integer",
                  "description": "ID of the order to be refunded"
                },
                "total_refund_amount": {
                  "type": "number",
                  "format": "float",
                  "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                  "example": 1.99,
                  "title": "Amount"
                },
                "total_refund_tax_amount": {
                  "type": "number",
                  "example": 1.95
                },
                "rounding": {
                  "type": "number",
                  "description": "Indicates rounding value to bring refund_total to an amount refundable via payment providers (in this case to 2 decimal places)"
                },
                "adjustment": {
                  "type": "number",
                  "format": "float",
                  "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                  "example": 1.99,
                  "title": "Amount"
                },
                "tax_inclusive": {
                  "type": "boolean",
                  "description": "Indicate if total_refund_amount includes tax amount"
                },
                "refund_methods": {
                  "type": "array",
                  "description": "An array of available refund methods.\n\nNote that `refund_methods` is an array of refund methods, with each refund method being an array of payment options.\n\nFor example, if the order was placed by a combination of store credit and bank deposit the  refund methods would be:\n```json\n{\n  \"refund_methods\": [\n    [\n      {\n        \"provider_id\": \"storecredit\",\n        \"provider_description\": \"Store Credit\",\n        \"amount\": 119.35,\n        \"offline\": false,\n        \"offline_provider\": false,\n        \"offline_reason\": \"\"\n      }\n    ],\n    [\n      {\n        \"provider_id\": \"custom\",\n        \"provider_description\": \"Custom\",\n        \"amount\": 119.35,\n        \"offline\": true,\n        \"offline_provider\": true,\n        \"offline_reason\": \"This is an offline payment provider.\"\n      }\n    ],\n    [\n      {\n        \"provider_id\": \"bankdeposit\",\n        \"provider_description\": \"Bank Deposit\",\n        \"amount\": 80.35,\n        \"offline\": true,\n        \"offline_provider\": true,\n        \"offline_reason\": \"This is an offline payment provider.\"\n      },\n      {\n        \"provider_id\": \"storecredit\",\n        \"provider_description\": \"Store Credit\",\n        \"amount\": 39,\n        \"offline\": false,\n        \"offline_provider\": false,\n        \"offline_reason\": \"\"\n      }\n    ]\n  ]\n}\n```\n\nIn this case there are three refund methods available to the merchant:\n1. Refund up to the entire order amount to store credit.\n2. Mark an amount up to the full order amount as refunded externally, through a provider or means not represented directly in BC (\"custom\").\n3. Refund the amount paid by store credit to store credit, and the amount paid by bank deposit via a manual refund, which will be recorded as being refunded against the bank deposit.\n\n>\n\n\n",
                  "items": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "example": {
                        "provider_id": "checkout_paypalexpress",
                        "provider_description": "Paypal Express",
                        "amount": 9.99,
                        "offline": true,
                        "offline_provider": true,
                        "offline_reason": "Multiple online refunds are not available"
                      },
                      "title": "Payment Option",
                      "properties": {
                        "provider_id": {
                          "type": "string",
                          "description": "Name of the payment method",
                          "example": "checkout_paypalexpress"
                        },
                        "provider_description": {
                          "type": "string",
                          "description": "Description for payment provider",
                          "example": "Paypal Express"
                        },
                        "amount": {
                          "type": "number",
                          "description": "amount to be refunded via this payment provider",
                          "example": 9.99
                        },
                        "offline": {
                          "type": "boolean",
                          "description": "Indicates the payment must be done offline due to constraints of the payment provider, such as partial refunds not being supported, or it being offline only such as cash on delivery of bank deposit.",
                          "example": true
                        },
                        "offline_provider": {
                          "type": "boolean",
                          "description": "Indicates if the payment provider is a strictly offline provider, such as cash on delivery or bank deposit.",
                          "example": true
                        },
                        "offline_reason": {
                          "type": "string",
                          "description": "Reason the payment option is offline only, if applicable.",
                          "example": "Multiple online refunds are not available"
                        }
                      }
                    },
                    "title": "Refund Method"
                  }
                }
              }
            },
            "meta": {
              "type": "object"
            }
          }
        },
        "examples": {
          "application/json": {
            "data": {
              "order_id": 1,
              "total_refund_amount": 1.99,
              "total_refund_tax_amount": 1.95,
              "rounding": 1,
              "adjustment": 1.99,
              "tax_inclusive": true,
              "refund_methods": [
                ""
              ]
            },
            "meta": {}
          }
        }
      },
      "Refund_Resp": {
        "description": "",
        "schema": {
          "type": "object",
          "properties": {
            "data": {
              "type": "object",
              "title": "Refund",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Refund resource ID",
                  "readOnly": true
                },
                "order_id": {
                  "type": "integer",
                  "description": "Reference to order id"
                },
                "user_id": {
                  "type": "integer",
                  "description": "Reference to the user's id who create this refund. This is automatically populated by BigCommerce.",
                  "readOnly": true
                },
                "created": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Timestamp of when this refund was created",
                  "readOnly": true
                },
                "reason": {
                  "type": "string",
                  "description": "Reason for refund"
                },
                "total_amount": {
                  "type": "number",
                  "format": "float",
                  "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                  "example": 1.99,
                  "title": "Amount"
                },
                "total_tax": {
                  "type": "number",
                  "description": "Total tax amount refunded back to shopper. Note: order_level_amount does not affect tax liability. This can be negative amount indicating we have collected tax by virtue of refunding less to the customer"
                },
                "items": {
                  "type": "array",
                  "description": "Array of items refunded",
                  "minItems": 1,
                  "items": {
                    "type": "object",
                    "properties": {
                      "item_type": {
                        "type": "string",
                        "description": "Type of item that was refunded",
                        "enum": [
                          "PRODUCT",
                          "GIFT_WRAPPING",
                          "SHIPPING",
                          "HANDLING",
                          "ORDER"
                        ]
                      },
                      "item_id": {
                        "type": "integer",
                        "description": "Reference to the item"
                      },
                      "reason": {
                        "type": "string",
                        "description": "Reason for refunding an item"
                      },
                      "quantity": {
                        "type": "integer",
                        "description": "Quantity of item refunded. Note: this will only be populated for item_type PRODUCT"
                      },
                      "requested_amount": {
                        "type": "number",
                        "format": "float",
                        "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                        "example": 1.99,
                        "title": "Amount"
                      }
                    },
                    "title": "Refund Item"
                  }
                },
                "payments": {
                  "type": "array",
                  "description": "An array of refund payments made to payment providers",
                  "minItems": 1,
                  "items": {
                    "type": "object",
                    "title": "Refund Payment",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "Reference to refund payment id",
                        "readOnly": true
                      },
                      "provider_id": {
                        "type": "string",
                        "description": "Reference to payment provider",
                        "example": "storecredit"
                      },
                      "amount": {
                        "type": "number",
                        "format": "float",
                        "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                        "example": 1.99,
                        "title": "Amount"
                      },
                      "offline": {
                        "type": "boolean",
                        "description": "Indicate whether payment was offline"
                      },
                      "is_declined": {
                        "type": "boolean",
                        "description": "Indicate if this payment has been declined by payment provider"
                      },
                      "declined_message": {
                        "type": "string",
                        "description": "Message indicate why payment was declined"
                      }
                    }
                  }
                }
              }
            },
            "meta": {
              "type": "object"
            }
          }
        },
        "examples": {
          "application/json": {
            "data": {
              "id": 1,
              "order_id": 1,
              "user_id": 1,
              "created": "",
              "reason": "",
              "total_amount": 1.99,
              "total_tax": 1,
              "items": [
                {
                  "item_type": "HANDLING",
                  "item_id": 1,
                  "reason": "",
                  "quantity": 1,
                  "requested_amount": 0.05
                }
              ],
              "payments": [
                {
                  "id": 1,
                  "provider_id": "checkout_paypalexpress",
                  "amount": 1.99,
                  "offline": true,
                  "is_declined": true,
                  "declined_message": ""
                }
              ]
            },
            "meta": {}
          }
        }
      },
      "TransactionCollection_Resp": {
        "description": "Response payload for the BigCommerce Order Transactions API.",
        "examples": {
          "application/json": {
            "data": [
              {
                "id": 85926313,
                "order_id": "121",
                "event": "purchase",
                "method": "nonce",
                "amount": 1,
                "currency": "USD",
                "gateway": "squarev2",
                "gateway_transaction_id": "pN5Kd7R9ilEI2ygBawCy7tMF|qwnAFAxRZ7tYRtIpZULg1yMF",
                "status": "ok",
                "test": false,
                "fraud_review": false,
                "reference_transaction_id": {},
                "date_created": "2018-05-08T15:06:12+00:00",
                "avs_result": {
                  "code": "",
                  "message": "",
                  "street_match": "",
                  "postal_match": ""
                },
                "cvv_result": {
                  "code": "",
                  "message": ""
                },
                "credit_card": {},
                "gift_certificate": {},
                "store_credit": {},
                "offline": {},
                "custom": {},
                "payment_instrument_token": {},
                "payment_method_id": "squarev2.card"
              }
            ],
            "meta": {
              "pagination": {
                "total": 1,
                "count": 1,
                "per_page": 50,
                "current_page": 1,
                "total_pages": 1,
                "links": {
                  "current": "?page=1&limit=50"
                }
              }
            }
          }
        },
        "schema": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "description": "A BigCommerce Transaction object describes a single transaction.",
                "allOf": [
                  {
                    "title": "Transaction Base",
                    "properties": {
                      "event": {
                        "type": "string",
                        "description": "Store event that created the transaction.\n",
                        "enum": [
                          "purchase",
                          "authorization",
                          "capture",
                          "refund",
                          "void",
                          "pending",
                          "settled"
                        ]
                      },
                      "method": {
                        "type": "string",
                        "description": "The payment method: `credit_card` - a credit-card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site; `offline` - payment method that takes place offline.\n",
                        "enum": [
                          "credit_card",
                          "electronic_wallet",
                          "gift_certificate",
                          "store_credit",
                          "apple_pay_card",
                          "apple_pay_token",
                          "token",
                          "custom",
                          "offsite",
                          "offline",
                          "nonce"
                        ]
                      },
                      "amount": {
                        "type": "number",
                        "format": "float",
                        "description": "Amount of money in the transaction.\n"
                      },
                      "currency": {
                        "type": "string",
                        "format": "ISO-4217",
                        "description": "Currency used for the transaction.\n"
                      },
                      "gateway": {
                        "type": "string",
                        "description": "The payment gateway, where applicable.\n",
                        "enum": [
                          "2checkout",
                          "adyen",
                          "amazon",
                          "authorizenet",
                          "bankdeposit",
                          "braintree",
                          "cheque",
                          "cod",
                          "custom",
                          "firstdatagge4",
                          "giftcertificate",
                          "hps",
                          "instore",
                          "klarna",
                          "migs",
                          "moneyorder",
                          "nmi",
                          "paypalexpress",
                          "paypalpaymentsprous",
                          "paypalpaymentsprouk",
                          "plugnpay",
                          "qbmsv2",
                          "securenet",
                          "square",
                          "storecredit",
                          "stripe",
                          "testgateway",
                          "usaepay"
                        ]
                      },
                      "gateway_transaction_id": {
                        "description": "The transaction ID returned by the payment gateway for this transaction item.\n",
                        "type": "string"
                      },
                      "date_created": {
                        "description": "The datetime of the transaction.\n",
                        "type": "string",
                        "format": "date-time"
                      },
                      "test": {
                        "type": "boolean",
                        "description": "True if the transaction performed was a test, or if the gateway is in test mode.\n"
                      },
                      "status": {
                        "type": "string",
                        "description": "Status of the transaction.\n",
                        "enum": [
                          "ok",
                          "error"
                        ]
                      },
                      "fraud_review": {
                        "type": "boolean",
                        "description": "Result of gateway fraud review, if any. Default is `false`.\n"
                      },
                      "reference_transaction_id": {
                        "type": "integer",
                        "description": "Identifier for an existing transaction upon which this transaction acts.\n"
                      },
                      "offline": {
                        "type": "object",
                        "description": "Offline payment (e.g., check or purchase order).",
                        "title": "Offline",
                        "properties": {
                          "display_name": {
                            "description": "Display name for the offline payment.\n",
                            "type": "string"
                          }
                        }
                      },
                      "custom": {
                        "type": "object",
                        "description": "Custom payment from manual order.",
                        "title": "Custom",
                        "properties": {
                          "payment_method": {
                            "description": "Text entered for the payment method in the control panel.\n",
                            "type": "string"
                          }
                        }
                      },
                      "payment_method_id": {
                        "type": "string",
                        "description": "The payment method ID used for this transaction\n"
                      }
                    },
                    "required": [
                      "event",
                      "method",
                      "amount",
                      "currency",
                      "gateway"
                    ]
                  },
                  {
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "Unique identifier for the transaction.\n"
                      },
                      "order_id": {
                        "type": "string",
                        "description": "Identifier for the BigCommerce Order with which this transaction is associated.\n"
                      },
                      "date_created": {
                        "description": "The datetime of the transaction.\n",
                        "type": "string",
                        "format": "date-time"
                      },
                      "payment_instrument_token": {
                        "type": "string",
                        "description": "This field contains internal BigPay token for stored card that is then mapped to the actual third-party token. We currently do not offer a way to get third party tokens.These tokens are read-only and do not return any information about the payment."
                      },
                      "avs_result": {
                        "description": "Address Verification Service (AVS) result from the payment gateway.",
                        "type": "object",
                        "title": "AVS Results",
                        "properties": {
                          "code": {
                            "description": "AVS code.",
                            "type": "string"
                          },
                          "message": {
                            "description": "AVS message.",
                            "type": "string"
                          },
                          "street_match": {
                            "description": "AVS Code for street matching result.",
                            "type": "string"
                          },
                          "postal_match": {
                            "description": "AVS Code for postal matching result.",
                            "type": "string"
                          }
                        }
                      },
                      "cvv_result": {
                        "description": "Card Verification Value result from the payment gateway.",
                        "type": "object",
                        "title": "CVV Result",
                        "properties": {
                          "code": {
                            "description": "CVV code.",
                            "type": "string"
                          },
                          "message": {
                            "description": "CVV message.",
                            "type": "string"
                          }
                        }
                      },
                      "credit_card": {
                        "type": "object",
                        "description": "A credit-card model.",
                        "title": "Credit Card",
                        "properties": {
                          "card_type": {
                            "type": "string",
                            "enum": [
                              "alelo",
                              "alia",
                              "american_express",
                              "cabal",
                              "carnet",
                              "dankort",
                              "diners_club",
                              "discover",
                              "elo",
                              "forbrugsforeningen",
                              "jcb",
                              "maestro",
                              "master",
                              "naranja",
                              "sodexo",
                              "unionpay",
                              "visa",
                              "vr"
                            ],
                            "description": "**Allowed values**: alelo, alia, american_express, cabal, carnet, dankort, diners_club, discover, elo, forbrugsforeningen, jcb, maestro, master, naranja, sodexo, unionpay, visa, vr"
                          },
                          "card_iin": {
                            "description": "The IIN of a credit-card number.\n",
                            "type": "string"
                          },
                          "card_last4": {
                            "description": "The last 4 digits of a credit-card number.\n",
                            "type": "string"
                          },
                          "card_expiry_month": {
                            "description": "The expiry month of a credit-card.\n",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "card_expiry_year": {
                            "description": "The expiry year of a credit-card.\n",
                            "type": "integer"
                          }
                        }
                      },
                      "gift_certificate": {
                        "type": "object",
                        "description": "A gift-certificate model.",
                        "title": "Gift Certificate",
                        "properties": {
                          "code": {
                            "description": "The gift-certificate code.\n",
                            "type": "string",
                            "example": "MB345"
                          },
                          "original_balance": {
                            "description": "The balance on a gift certificate when it was purchased.\n",
                            "type": "number",
                            "format": "float",
                            "example": 100
                          },
                          "starting_balance": {
                            "description": "The balance on a gift certificate at the time of this purchase.\n",
                            "type": "number",
                            "format": "float",
                            "example": 100
                          },
                          "remaining_balance": {
                            "description": "The remaining balance on a gift certificate.\n",
                            "type": "number",
                            "format": "float",
                            "example": 35.42
                          },
                          "status": {
                            "description": "The status of a gift certificate: `active` - gift certificate is active; `pending` - gift certificate purchase is pending; `disabled` - gift certificate is disabled; `expired` - gift certificate is expired.\n",
                            "type": "string",
                            "enum": [
                              "active",
                              "pending",
                              "disabled",
                              "expired"
                            ]
                          }
                        }
                      },
                      "store_credit": {
                        "type": "object",
                        "description": "A store credit model.\n",
                        "properties": {
                          "remaining_balance": {
                            "description": "Remaining balance of shopper's store credit.\n",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                ],
                "title": "Transaction",
                "type": "object"
              }
            },
            "meta": {
              "type": "object",
              "title": "metaCollection_Full",
              "properties": {
                "pagination": {
                  "type": "object",
                  "title": "pagination_Full",
                  "properties": {
                    "total": {
                      "description": "Total number of items in the result set.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "count": {
                      "description": "Total number of items in the collection response.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "per_page": {
                      "description": "The amount of items returned in the collection per page, controlled by the limit parameter.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "current_page": {
                      "description": "The page you are currently on within the collection.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "total_pages": {
                      "description": "The total number of pages in the collection.",
                      "type": "integer",
                      "format": "int32"
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "previous": {
                          "type": "string",
                          "description": "Link to the previous page returned in the response.\n"
                        },
                        "current": {
                          "type": "string",
                          "description": "Link to the current page returned in the response.\n",
                          "example": "?page=1&limit=50"
                        },
                        "next": {
                          "type": "string",
                          "description": "Link to the next page returned in the response.\n"
                        }
                      },
                      "title": "links_Full"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Transaction_Resp": {
        "description": "Response payload for the BigCommerce Order Transactions API single transaction.",
        "schema": {
          "allOf": [
            {
              "properties": {
                "data": {
                  "type": "object",
                  "title": "Transaction_Post",
                  "properties": {
                    "event": {
                      "type": "string",
                      "description": "Store event that created the transaction.\n",
                      "enum": [
                        "purchase",
                        "authorization",
                        "capture",
                        "refund",
                        "void",
                        "pending",
                        "settled"
                      ]
                    },
                    "method": {
                      "type": "string",
                      "description": "The payment method: `credit_card` - a credit-card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site (e.g., PayPal); `offline` - payment method that takes place offline.\n",
                      "enum": [
                        "credit_card",
                        "electronic_wallet",
                        "gift_certificate",
                        "store_credit",
                        "apple_pay_card",
                        "apple_pay_token",
                        "token",
                        "custom",
                        "offsite",
                        "offline",
                        "nonce"
                      ]
                    },
                    "amount": {
                      "type": "number",
                      "format": "float",
                      "description": "Amount of money in the transaction.\n"
                    },
                    "currency": {
                      "type": "string",
                      "format": "ISO-4217",
                      "description": "Currency used for the transaction.\n"
                    },
                    "gateway": {
                      "type": "string",
                      "description": "The payment gateway, where applicable.\n",
                      "enum": [
                        "2checkout",
                        "adyen",
                        "amazon",
                        "authorizenet",
                        "bankdeposit",
                        "braintree",
                        "cheque",
                        "cod",
                        "custom",
                        "firstdatagge4",
                        "giftcertificate",
                        "hps",
                        "instore",
                        "klarna",
                        "migs",
                        "moneyorder",
                        "nmi",
                        "paypalexpress",
                        "paypalpaymentsprous",
                        "paypalpaymentsprouk",
                        "plugnpay",
                        "qbmsv2",
                        "securenet",
                        "square",
                        "storecredit",
                        "stripe",
                        "testgateway",
                        "usaepay"
                      ]
                    },
                    "gateway_transaction_id": {
                      "description": "The transaction ID returned by the payment gateway for this transaction item.\n",
                      "type": "string"
                    },
                    "date_created": {
                      "description": "The datetime of the transaction.\n",
                      "type": "string",
                      "format": "date-time"
                    },
                    "test": {
                      "type": "boolean",
                      "description": "True if the transaction performed was a test, or if the gateway is in test mode.\n"
                    },
                    "status": {
                      "type": "string",
                      "description": "Status of the transaction.\n",
                      "enum": [
                        "ok",
                        "error"
                      ]
                    },
                    "fraud_review": {
                      "type": "boolean",
                      "description": "Result of gateway fraud review, if any. Default is `false`.\n"
                    },
                    "reference_transaction_id": {
                      "type": "integer",
                      "description": "Identifier for an existing transaction upon which this transaction acts.\n"
                    },
                    "offline": {
                      "type": "object",
                      "description": "Offline payment (e.g., check or purchase order).",
                      "properties": {
                        "display_name": {
                          "description": "Display name for the offline payment.\n",
                          "type": "string"
                        }
                      },
                      "title": "Offline"
                    },
                    "custom": {
                      "type": "object",
                      "description": "Custom payment from manual order.",
                      "properties": {
                        "payment_method": {
                          "description": "Text entered for the payment method in the control panel.\n",
                          "type": "string"
                        }
                      },
                      "title": "Custom"
                    }
                  },
                  "required": [
                    "event",
                    "method",
                    "amount",
                    "currency",
                    "gateway"
                  ]
                }
              }
            },
            {
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Unique identifier for the transaction.\n"
                },
                "order_id": {
                  "type": "string",
                  "description": "Identifier for the BigCommerce Order with which this transaction is associated."
                },
                "date_created": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The datetime of the transaction.\n"
                },
                "payment_instrument_token": {
                  "type": "string",
                  "description": "This field contains internal BigPay token for stored card that is then mapped to the actual third-party token. We currently do not offer a way to get third party tokens.These tokens are read-only and do not return any information about the payment."
                },
                "avs_result": {
                  "description": "Address Verification Service (AVS) result from the payment gateway.",
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "AVS code.",
                      "type": "string"
                    },
                    "message": {
                      "description": "AVS message.",
                      "type": "string"
                    },
                    "street_match": {
                      "description": "AVS Code for street matching result.",
                      "type": "string"
                    },
                    "postal_match": {
                      "description": "AVS Code for postal matching result.",
                      "type": "string"
                    }
                  },
                  "title": "AVS Results"
                },
                "cvv_result": {
                  "description": "Card Verification Value result from the payment gateway.",
                  "type": "object",
                  "properties": {
                    "code": {
                      "description": "CVV code.",
                      "type": "string"
                    },
                    "message": {
                      "description": "CVV message.",
                      "type": "string"
                    }
                  },
                  "title": "CVV Result"
                },
                "credit_card": {
                  "type": "object",
                  "description": "A credit-card model.",
                  "title": "Credit Card",
                  "properties": {
                    "card_type": {
                      "type": "string",
                      "enum": [
                        "alelo",
                        "alia",
                        "american_express",
                        "cabal",
                        "carnet",
                        "dankort",
                        "diners_club",
                        "discover",
                        "elo",
                        "forbrugsforeningen",
                        "jcb",
                        "maestro",
                        "master",
                        "naranja",
                        "sodexo",
                        "unionpay",
                        "visa",
                        "vr"
                      ],
                      "description": "**Allowed values**: alelo, alia, american_express, cabal, carnet, dankort, diners_club, discover, elo, forbrugsforeningen, jcb, maestro, master, naranja, sodexo, unionpay, visa, vr"
                    },
                    "card_iin": {
                      "description": "The IIN of a credit-card number.\n",
                      "type": "string"
                    },
                    "card_last4": {
                      "description": "The last 4 digits of a credit-card number.\n",
                      "type": "string"
                    },
                    "card_expiry_month": {
                      "description": "The expiry month of a credit-card.\n",
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 12
                    },
                    "card_expiry_year": {
                      "description": "The expiry year of a credit-card.\n",
                      "type": "integer"
                    }
                  }
                },
                "gift_certificate": {
                  "type": "object",
                  "description": "A gift-certificate model.",
                  "title": "Gift Certificate",
                  "properties": {
                    "code": {
                      "description": "The gift-certificate code.\n",
                      "type": "string",
                      "example": "MB345"
                    },
                    "original_balance": {
                      "description": "The balance on a gift certificate when it was purchased.\n",
                      "type": "number",
                      "format": "float",
                      "example": 100
                    },
                    "starting_balance": {
                      "description": "The balance on a gift certificate at the time of this purchase.\n",
                      "type": "number",
                      "format": "float",
                      "example": 100
                    },
                    "remaining_balance": {
                      "description": "The remaining balance on a gift certificate.\n",
                      "type": "number",
                      "format": "float",
                      "example": 35.42
                    },
                    "status": {
                      "description": "The status of a gift certificate: `active` - gift certificate is active; `pending` - gift certificate purchase is pending; `disabled` - gift certificate is disabled; `expired` - gift certificate is expired.\n",
                      "type": "string",
                      "enum": [
                        "active",
                        "pending",
                        "disabled",
                        "expired"
                      ]
                    }
                  }
                },
                "store_credit": {
                  "type": "object",
                  "description": "A store credit model.\n",
                  "properties": {
                    "remaining_balance": {
                      "description": "Remaining balance of shopper's store credit.\n",
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "properties": {
                "meta": {
                  "type": "object",
                  "title": "metaEmpty_Full"
                }
              }
            }
          ],
          "type": "object"
        }
      },
      "RefundQuotesBATCH_Resp": {
        "description": "",
        "schema": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "RefundQuote_Full",
                "properties": {
                  "order_id": {
                    "type": "integer",
                    "description": "ID of the order to be refunded"
                  },
                  "total_refund_amount": {
                    "type": "number",
                    "format": "float",
                    "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                    "example": 1.99,
                    "title": "Amount"
                  },
                  "total_refund_tax_amount": {
                    "type": "number",
                    "example": 1.95
                  },
                  "rounding": {
                    "type": "number",
                    "description": "Indicates rounding value to bring refund_total to an amount refundable via payment providers (in this case to 2 decimal places)"
                  },
                  "adjustment": {
                    "type": "number",
                    "format": "float",
                    "description": "A non-negative 2 decimal place rounded value that represents that amount that can be charged/refunded via payment providers",
                    "example": 1.99,
                    "title": "Amount"
                  },
                  "tax_inclusive": {
                    "type": "boolean",
                    "description": "Indicate if total_refund_amount includes tax amount"
                  },
                  "refund_methods": {
                    "type": "array",
                    "description": "An array of available refund methods.\n\nNote that `refund_methods` is an array of refund methods, with each refund method being an array of payment options.\n\nFor example, if the order was placed by a combination of store credit and bank deposit the  refund methods would be:\n```json\n{\n  \"refund_methods\": [\n    [\n      {\n        \"provider_id\": \"storecredit\",\n        \"provider_description\": \"Store Credit\",\n        \"amount\": 119.35,\n        \"offline\": false,\n        \"offline_provider\": false,\n        \"offline_reason\": \"\"\n      }\n    ],\n    [\n      {\n        \"provider_id\": \"custom\",\n        \"provider_description\": \"Custom\",\n        \"amount\": 119.35,\n        \"offline\": true,\n        \"offline_provider\": true,\n        \"offline_reason\": \"This is an offline payment provider.\"\n      }\n    ],\n    [\n      {\n        \"provider_id\": \"bankdeposit\",\n        \"provider_description\": \"Bank Deposit\",\n        \"amount\": 80.35,\n        \"offline\": true,\n        \"offline_provider\": true,\n        \"offline_reason\": \"This is an offline payment provider.\"\n      },\n      {\n        \"provider_id\": \"storecredit\",\n        \"provider_description\": \"Store Credit\",\n        \"amount\": 39,\n        \"offline\": false,\n        \"offline_provider\": false,\n        \"offline_reason\": \"\"\n      }\n    ]\n  ]\n}\n```\n\nIn this case there are three refund methods available to the merchant:\n1. Refund up to the entire order amount to store credit.\n2. Mark an amount up to the full order amount as refunded externally, through a provider or means not represented directly in BC (\"custom\").\n3. Refund the amount paid by store credit to store credit, and the amount paid by bank deposit via a manual refund, which will be recorded as being refunded against the bank deposit.\n\n>\n\n\n",
                    "items": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "example": {
                          "provider_id": "checkout_paypalexpress",
                          "provider_description": "Paypal Express",
                          "amount": 9.99,
                          "offline": true,
                          "offline_provider": true,
                          "offline_reason": "Multiple online refunds are not available"
                        },
                        "title": "Payment Option",
                        "properties": {
                          "provider_id": {
                            "type": "string",
                            "description": "Name of the payment method",
                            "example": "checkout_paypalexpress"
                          },
                          "provider_description": {
                            "type": "string",
                            "description": "Description for payment provider",
                            "example": "Paypal Express"
                          },
                          "amount": {
                            "type": "number",
                            "description": "amount to be refunded via this payment provider",
                            "example": 9.99
                          },
                          "offline": {
                            "type": "boolean",
                            "description": "Indicates the payment must be done offline due to constraints of the payment provider, such as partial refunds not being supported, or it being offline only such as cash on delivery of bank deposit.",
                            "example": true
                          },
                          "offline_provider": {
                            "type": "boolean",
                            "description": "Indicates if the payment provider is a strictly offline provider, such as cash on delivery or bank deposit.",
                            "example": true
                          },
                          "offline_reason": {
                            "type": "string",
                            "description": "Reason the payment option is offline only, if applicable.",
                            "example": "Multiple online refunds are not available"
                          }
                        }
                      },
                      "title": "Refund Method"
                    }
                  }
                }
              }
            },
            "errors": {
              "type": "array",
              "items": {
                "type": "object",
                "description": "Failed quote response.",
                "properties": {
                  "order_id": {
                    "type": "integer"
                  },
                  "status": {
                    "type": "integer",
                    "description": "HTTP status code",
                    "example": 422
                  },
                  "error": {
                    "type": "string",
                    "description": "details why the request failed"
                  }
                },
                "title": "FailedQuoteError"
              }
            },
            "meta": {
              "type": "object",
              "title": "Meta",
              "properties": {
                "meta": {
                  "type": "object",
                  "description": "Data about the response, including pagination and collection totals.",
                  "title": "Pagination",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total number of items in the result set.\n",
                      "example": 36
                    },
                    "count": {
                      "type": "integer",
                      "description": "Total number of items in the collection response.\n",
                      "example": 36
                    },
                    "per_page": {
                      "type": "integer",
                      "description": "The amount of items returned in the collection per page, controlled by the limit parameter.\n",
                      "example": 50
                    },
                    "current_page": {
                      "type": "integer",
                      "description": "The page you are currently on within the collection.\n",
                      "example": 1
                    },
                    "total_pages": {
                      "type": "integer",
                      "description": "The total number of pages in the collection.\n",
                      "example": 1
                    },
                    "links": {
                      "type": "object",
                      "description": "Pagination links for the previous and next parts of the whole collection.\n",
                      "properties": {
                        "previous": {
                          "type": "string",
                          "description": "Link to the previous page returned in the response.\n"
                        },
                        "current": {
                          "type": "string",
                          "description": "Link to the current page returned in the response.\n",
                          "example": "?page=1&limit=50"
                        },
                        "next": {
                          "type": "string",
                          "description": "Link to the next page returned in the response.\n"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "examples": {
          "application/json": {
            "data": [
              {
                "order_id": 1,
                "total_refund_amount": 0.05,
                "total_refund_tax_amount": 1.95,
                "rounding": 1,
                "adjustment": 0.05,
                "tax_inclusive": true,
                "refund_methods": [
                  ""
                ]
              },
              {
                "order_id": 100,
                "total_refund_amount": 5,
                "total_refund_tax_amount": 0,
                "rounding": 0,
                "adjustment": 0,
                "tax_inclusive": false,
                "refund_methods": [
                  ""
                ]
              }
            ],
            "errors": [],
            "meta": {
              "failure": 0,
              "success": 2,
              "total": 2
            }
          }
        }
      }
    },
    "x-stoplight": {
      "docs": {
        "includeDownloadLink": true,
        "showModels": false
      }
    }
  }